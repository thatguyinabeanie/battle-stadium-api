# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `versionist` gem.
# Please instead update this file by running `bin/tapioca gem versionist`.


# source://versionist//lib/versionist.rb#3
module Versionist
  extend ::ActiveSupport::Autoload

  class << self
    # source://versionist//lib/versionist.rb#17
    def configuration; end

    # @return [Boolean]
    #
    # source://versionist//lib/versionist.rb#21
    def older_than_rails_5?; end

    # source://versionist//lib/versionist.rb#25
    def test_path; end
  end
end

# source://versionist//lib/versionist/configuration.rb#2
class Versionist::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://versionist//lib/versionist/configuration.rb#10
  def initialize; end

  # source://versionist//lib/versionist/configuration.rb#17
  def clear!; end

  # Returns the value of attribute configured_test_framework.
  #
  # source://versionist//lib/versionist/configuration.rb#8
  def configured_test_framework; end

  # Sets the attribute configured_test_framework
  #
  # @param value the value to set the attribute configured_test_framework to.
  #
  # source://versionist//lib/versionist/configuration.rb#8
  def configured_test_framework=(_arg0); end

  # Returns the value of attribute default_version.
  #
  # source://versionist//lib/versionist/configuration.rb#4
  def default_version; end

  # Sets the attribute default_version
  #
  # @param value the value to set the attribute default_version to.
  #
  # source://versionist//lib/versionist/configuration.rb#4
  def default_version=(_arg0); end

  # Returns the value of attribute header_versions.
  #
  # source://versionist//lib/versionist/configuration.rb#5
  def header_versions; end

  # Sets the attribute header_versions
  #
  # @param value the value to set the attribute header_versions to.
  #
  # source://versionist//lib/versionist/configuration.rb#5
  def header_versions=(_arg0); end

  # Returns the value of attribute parameter_versions.
  #
  # source://versionist//lib/versionist/configuration.rb#6
  def parameter_versions; end

  # Sets the attribute parameter_versions
  #
  # @param value the value to set the attribute parameter_versions to.
  #
  # source://versionist//lib/versionist/configuration.rb#6
  def parameter_versions=(_arg0); end

  # Returns the value of attribute path_versions.
  #
  # source://versionist//lib/versionist/configuration.rb#7
  def path_versions; end

  # Sets the attribute path_versions
  #
  # @param value the value to set the attribute path_versions to.
  #
  # source://versionist//lib/versionist/configuration.rb#7
  def path_versions=(_arg0); end

  # Returns the value of attribute versioning_strategies.
  #
  # source://versionist//lib/versionist/configuration.rb#3
  def versioning_strategies; end

  # Sets the attribute versioning_strategies
  #
  # @param value the value to set the attribute versioning_strategies to.
  #
  # source://versionist//lib/versionist/configuration.rb#3
  def versioning_strategies=(_arg0); end
end

# Various fixes for quirks in Rails' inflector
#
# source://versionist//lib/generators/versionist/inflector_fixes.rb#3
module Versionist::InflectorFixes
  # Transforms a module name for use in a file path
  #
  # source://versionist//lib/generators/versionist/inflector_fixes.rb#10
  def module_name_for_path(module_name); end

  # Transforms a module name for use in a route
  #
  # source://versionist//lib/generators/versionist/inflector_fixes.rb#5
  def module_name_for_route(module_name); end
end

# When your routes don't include an explicit format in the URL (i.e. `match 'foos.(:format)' => foos#index`),
# Rails inspects the `Accept` header to determine the requested format. Since an `Accept` header can have multiple values,
# Rails uses the first one present to determine the format. If your custom version header happens to be the first value
# in the `Accept` header, it would incorrectly be interpretted as the format. This middleware moves your custom version header
# (if found) to the end of the `Accept` header so as to not interfere with this format logic in Rails.
#
# source://versionist//lib/versionist/middleware.rb#7
class Versionist::Middleware
  # @return [Middleware] a new instance of Middleware
  #
  # source://versionist//lib/versionist/middleware.rb#12
  def initialize(app); end

  # source://versionist//lib/versionist/middleware.rb#20
  def _call(env); end

  # source://versionist//lib/versionist/middleware.rb#16
  def call(env); end
end

# source://versionist//lib/versionist/middleware.rb#9
Versionist::Middleware::ACCEPT = T.let(T.unsafe(nil), String)

# source://versionist//lib/versionist/middleware.rb#10
Versionist::Middleware::HTTP_ACCEPT = T.let(T.unsafe(nil), String)

# source://versionist//lib/versionist/railtie.rb#4
class Versionist::Railtie < ::Rails::Railtie; end

# source://versionist//lib/versionist/routing.rb#4
module Versionist::Routing
  # Allows you to constrain routes to specific versions of your api using versioning strategies.
  # Supported formats:
  #
  # HTTP Header
  # api_version(:module => "V1", :header => {:name => "Accept", :value => "application/vnd.mycompany.com; version=1"}})
  #
  # Path
  # api_version(:module => "V1", :path => {:value => "v1"}})
  #
  # Request Parameter
  # api_version(:module => "V1", :parameter => {:name => "version", :value => "1"}})
  #
  # Specifying default version:
  # api_version(:module => "V1", :default => true, :header => {:name => "Accept", :value => "application/vnd.mycompany.com; version=1"}})
  #
  # Multiple Strategies per version
  # api_version(:module => "V1", :header => {:name => "Accept", :value => "application/vnd.mycompany.com; version=1"}, :path => {:value => "v1"})
  #
  # @raise [ArgumentError]
  #
  # source://versionist//lib/versionist/routing.rb#22
  def api_version(config, &block); end

  private

  # source://versionist//lib/versionist/routing.rb#65
  def configure_default(config, &block); end

  # source://versionist//lib/versionist/routing.rb#41
  def configure_header(config, &block); end

  # source://versionist//lib/versionist/routing.rb#58
  def configure_parameter(config, &block); end

  # source://versionist//lib/versionist/routing.rb#48
  def configure_path(config, &block); end

  # deals with quirks in routing among the various Rails versions
  #
  # source://versionist//lib/versionist/routing.rb#73
  def rails_quirks(config, &block); end
end

# source://versionist//lib/generators/versionist/rspec_helper.rb#2
module Versionist::RspecHelper
  # Gets the name of the helper file to require in spec files
  # Accounting for rspec-rails 2 vs rspec-rails 3
  #
  # source://versionist//lib/generators/versionist/rspec_helper.rb#5
  def rspec_helper_filename; end
end

# source://versionist//lib/versionist/versioning_strategy.rb#2
module Versionist::VersioningStrategy
  extend ::ActiveSupport::Autoload
end

# source://versionist//lib/versionist/versioning_strategy/base.rb#5
class Versionist::VersioningStrategy::Base
  # @raise [ArgumentError]
  # @return [Base] a new instance of Base
  #
  # source://versionist//lib/versionist/versioning_strategy/base.rb#8
  def initialize(config = T.unsafe(nil)); end

  # source://versionist//lib/versionist/versioning_strategy/base.rb#15
  def ==(other); end

  # Returns the value of attribute config.
  #
  # source://versionist//lib/versionist/versioning_strategy/base.rb#6
  def config; end
end

# Implements the default version handling strategy.
#
# source://versionist//lib/versionist/versioning_strategy/default.rb#4
class Versionist::VersioningStrategy::Default < ::Versionist::VersioningStrategy::Base
  # @raise [ArgumentError]
  # @return [Default] a new instance of Default
  #
  # source://versionist//lib/versionist/versioning_strategy/default.rb#8
  def initialize(config); end

  # source://versionist//lib/versionist/versioning_strategy/default.rb#19
  def ==(other); end

  # @return [Boolean]
  #
  # source://versionist//lib/versionist/versioning_strategy/default.rb#15
  def matches?(request); end

  # Returns the value of attribute module.
  #
  # source://versionist//lib/versionist/versioning_strategy/default.rb#6
  def module; end

  # Sets the attribute module
  #
  # @param value the value to set the attribute module to.
  #
  # source://versionist//lib/versionist/versioning_strategy/default.rb#6
  def module=(_arg0); end

  # Returns the value of attribute strategies.
  #
  # source://versionist//lib/versionist/versioning_strategy/default.rb#5
  def strategies; end

  # Sets the attribute strategies
  #
  # @param value the value to set the attribute strategies to.
  #
  # source://versionist//lib/versionist/versioning_strategy/default.rb#5
  def strategies=(_arg0); end

  private

  # @return [Boolean]
  #
  # source://versionist//lib/versionist/versioning_strategy/default.rb#28
  def header_matches?(request); end

  # @return [Boolean]
  #
  # source://versionist//lib/versionist/versioning_strategy/default.rb#32
  def parameter_matches?(request); end
end

# Implements the header versioning strategy.
#
# source://versionist//lib/versionist/versioning_strategy/header.rb#4
class Versionist::VersioningStrategy::Header < ::Versionist::VersioningStrategy::Base
  # Creates a new Header VersioningStrategy object. config must contain the following keys:
  # - :header the header hash to inspect
  #
  # @raise [ArgumentError]
  # @return [Header] a new instance of Header
  #
  # source://versionist//lib/versionist/versioning_strategy/header.rb#8
  def initialize(config); end

  # source://versionist//lib/versionist/versioning_strategy/header.rb#36
  def ==(other); end

  # @return [Boolean]
  #
  # source://versionist//lib/versionist/versioning_strategy/header.rb#16
  def matches?(request); end
end

# Implements the parameter versioning strategy.
#
# source://versionist//lib/versionist/versioning_strategy/parameter.rb#4
class Versionist::VersioningStrategy::Parameter < ::Versionist::VersioningStrategy::Base
  # Creates a new Parameter VersioningStrategy object. config must contain the following keys:
  # - :parameter the parameter hash to inspect
  #
  # @raise [ArgumentError]
  # @return [Parameter] a new instance of Parameter
  #
  # source://versionist//lib/versionist/versioning_strategy/parameter.rb#8
  def initialize(config); end

  # source://versionist//lib/versionist/versioning_strategy/parameter.rb#20
  def ==(other); end

  # @return [Boolean]
  #
  # source://versionist//lib/versionist/versioning_strategy/parameter.rb#15
  def matches?(request); end
end

# Implements the path versioning strategy. It expects the following path format:
# GET /<version>/...
#
# source://versionist//lib/versionist/versioning_strategy/path.rb#5
class Versionist::VersioningStrategy::Path < ::Versionist::VersioningStrategy::Base
  # Creates a new Path VersioningStrategy object. config must contain the following keys:
  # - :path the path prefix containing the version
  #
  # @raise [ArgumentError]
  # @return [Path] a new instance of Path
  #
  # source://versionist//lib/versionist/versioning_strategy/path.rb#9
  def initialize(config); end

  # source://versionist//lib/versionist/versioning_strategy/path.rb#15
  def ==(other); end
end
