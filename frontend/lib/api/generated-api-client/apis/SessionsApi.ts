/* tslint:disable */
/* eslint-disable */
/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { CreateSession, Session, SessionAndUser } from "../models/index";
import {
  CreateSessionFromJSON,
  CreateSessionToJSON,
  SessionFromJSON,
  SessionToJSON,
  SessionAndUserFromJSON,
  SessionAndUserToJSON,
} from "../models/index";

export interface CreateRequest {
  createSession?: CreateSession;
}

/**
 *
 */
export class SessionsApi extends runtime.BaseAPI {
  /**
   * Creates a new session.
   * Create
   */
  async createRaw(
    requestParameters: CreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Session>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/v1/auth/session`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateSessionToJSON(requestParameters["createSession"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => SessionFromJSON(jsonValue));
  }

  /**
   * Creates a new session.
   * Create
   */
  async create(
    createSession?: CreateSession,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Session> {
    const response = await this.createRaw({ createSession: createSession }, initOverrides);
    return await response.value();
  }

  /**
   * Shows the current session.
   * Get
   */
  async getSessionRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<SessionAndUser>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration?.apiKey) {
      headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/v1/auth/session`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => SessionAndUserFromJSON(jsonValue));
  }

  /**
   * Shows the current session.
   * Get
   */
  async getSession(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SessionAndUser> {
    const response = await this.getSessionRaw(initOverrides);
    return await response.value();
  }

  /**
   * Logs out a User.
   * Delete
   */
  async logoutUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration?.apiKey) {
      headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/v1/auth/session`,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Logs out a User.
   * Delete
   */
  async logoutUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
    await this.logoutUserRaw(initOverrides);
  }

  /**
   * Updates the current session.
   * Update
   */
  async updateRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Session>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration?.apiKey) {
      headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/v1/auth/session`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => SessionFromJSON(jsonValue));
  }

  /**
   * Updates the current session.
   * Update
   */
  async update(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Session> {
    const response = await this.updateRaw(initOverrides);
    return await response.value();
  }
}
