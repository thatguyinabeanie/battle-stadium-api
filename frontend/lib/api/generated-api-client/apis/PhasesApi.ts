/* tslint:disable */
/* eslint-disable */
/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { Phase, PhaseDetails } from "../models/index";
import { PhaseFromJSON, PhaseToJSON, PhaseDetailsFromJSON, PhaseDetailsToJSON } from "../models/index";

export interface DeleteTournamentPhaseRequest {
  tournamentId: number;
  id: number;
}

export interface ListTournamentPhasesRequest {
  tournamentId: number;
}

export interface PatchTournamentPhaseRequest {
  tournamentId: number;
  id: number;
  phase?: Phase;
}

export interface PostTournamentPhaseRequest {
  tournamentId: number;
  phase?: Phase;
}

export interface ShowTournamentPhaseRequest {
  tournamentId: number;
  id: number;
}

/**
 *
 */
export class PhasesApi extends runtime.BaseAPI {
  /**
   * Deletes a Tournament Phase.
   * Delete Tournament Phase
   */
  async deleteTournamentPhaseRaw(
    requestParameters: DeleteTournamentPhaseRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["tournamentId"] == null) {
      throw new runtime.RequiredError(
        "tournamentId",
        'Required parameter "tournamentId" was null or undefined when calling deleteTournamentPhase().',
      );
    }

    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling deleteTournamentPhase().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/tournaments/{tournament_id}/phases/{id}`
          .replace(`{${"tournament_id"}}`, encodeURIComponent(String(requestParameters["tournamentId"])))
          .replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"]))),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Deletes a Tournament Phase.
   * Delete Tournament Phase
   */
  async deleteTournamentPhase(
    tournamentId: number,
    id: number,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteTournamentPhaseRaw({ tournamentId: tournamentId, id: id }, initOverrides);
  }

  /**
   * Retrieves a list of all Phases
   * List Tournament Phases
   */
  async listTournamentPhasesRaw(
    requestParameters: ListTournamentPhasesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Phase>>> {
    if (requestParameters["tournamentId"] == null) {
      throw new runtime.RequiredError(
        "tournamentId",
        'Required parameter "tournamentId" was null or undefined when calling listTournamentPhases().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/tournaments/{tournament_id}/phases`.replace(
          `{${"tournament_id"}}`,
          encodeURIComponent(String(requestParameters["tournamentId"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PhaseFromJSON));
  }

  /**
   * Retrieves a list of all Phases
   * List Tournament Phases
   */
  async listTournamentPhases(
    tournamentId: number,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<Phase>> {
    const response = await this.listTournamentPhasesRaw({ tournamentId: tournamentId }, initOverrides);
    return await response.value();
  }

  /**
   * Updates a Tournament Phase.
   * Update Tournament Phase
   */
  async patchTournamentPhaseRaw(
    requestParameters: PatchTournamentPhaseRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PhaseDetails>> {
    if (requestParameters["tournamentId"] == null) {
      throw new runtime.RequiredError(
        "tournamentId",
        'Required parameter "tournamentId" was null or undefined when calling patchTournamentPhase().',
      );
    }

    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling patchTournamentPhase().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/v1/tournaments/{tournament_id}/phases/{id}`
          .replace(`{${"tournament_id"}}`, encodeURIComponent(String(requestParameters["tournamentId"])))
          .replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"]))),
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: PhaseToJSON(requestParameters["phase"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => PhaseDetailsFromJSON(jsonValue));
  }

  /**
   * Updates a Tournament Phase.
   * Update Tournament Phase
   */
  async patchTournamentPhase(
    tournamentId: number,
    id: number,
    phase?: Phase,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PhaseDetails> {
    const response = await this.patchTournamentPhaseRaw(
      { tournamentId: tournamentId, id: id, phase: phase },
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Creates a new Tournament Phase.
   * Create Tournament Phase
   */
  async postTournamentPhaseRaw(
    requestParameters: PostTournamentPhaseRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PhaseDetails>> {
    if (requestParameters["tournamentId"] == null) {
      throw new runtime.RequiredError(
        "tournamentId",
        'Required parameter "tournamentId" was null or undefined when calling postTournamentPhase().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/v1/tournaments/{tournament_id}/phases`.replace(
          `{${"tournament_id"}}`,
          encodeURIComponent(String(requestParameters["tournamentId"])),
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: PhaseToJSON(requestParameters["phase"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => PhaseDetailsFromJSON(jsonValue));
  }

  /**
   * Creates a new Tournament Phase.
   * Create Tournament Phase
   */
  async postTournamentPhase(
    tournamentId: number,
    phase?: Phase,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PhaseDetails> {
    const response = await this.postTournamentPhaseRaw({ tournamentId: tournamentId, phase: phase }, initOverrides);
    return await response.value();
  }

  /**
   * Retrieves a Tournament Phase
   * Show Tournament Phase
   */
  async showTournamentPhaseRaw(
    requestParameters: ShowTournamentPhaseRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PhaseDetails>> {
    if (requestParameters["tournamentId"] == null) {
      throw new runtime.RequiredError(
        "tournamentId",
        'Required parameter "tournamentId" was null or undefined when calling showTournamentPhase().',
      );
    }

    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling showTournamentPhase().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/tournaments/{tournament_id}/phases/{id}`
          .replace(`{${"tournament_id"}}`, encodeURIComponent(String(requestParameters["tournamentId"])))
          .replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"]))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => PhaseDetailsFromJSON(jsonValue));
  }

  /**
   * Retrieves a Tournament Phase
   * Show Tournament Phase
   */
  async showTournamentPhase(
    tournamentId: number,
    id: number,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PhaseDetails> {
    const response = await this.showTournamentPhaseRaw({ tournamentId: tournamentId, id: id }, initOverrides);
    return await response.value();
  }
}
