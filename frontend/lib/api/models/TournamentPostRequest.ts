/* tslint:disable */
/* eslint-disable */
/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 *
 * @export
 * @interface TournamentPostRequest
 */
export interface TournamentPostRequest {
  /**
   *
   * @type {number}
   * @memberof TournamentPostRequest
   */
  organizationId: number;
  /**
   *
   * @type {string}
   * @memberof TournamentPostRequest
   */
  name: string;
  /**
   *
   * @type {number}
   * @memberof TournamentPostRequest
   */
  gameId: number;
  /**
   *
   * @type {number}
   * @memberof TournamentPostRequest
   */
  formatId: number;
  /**
   *
   * @type {boolean}
   * @memberof TournamentPostRequest
   */
  autostart: boolean;
  /**
   *
   * @type {Date}
   * @memberof TournamentPostRequest
   */
  startAt?: Date;
  /**
   *
   * @type {number}
   * @memberof TournamentPostRequest
   */
  playerCap: number | null;
  /**
   *
   * @type {Date}
   * @memberof TournamentPostRequest
   */
  registrationStartAt: Date | null;
  /**
   *
   * @type {Date}
   * @memberof TournamentPostRequest
   */
  registrationEndAt: Date | null;
  /**
   *
   * @type {boolean}
   * @memberof TournamentPostRequest
   */
  lateRegistration: boolean;
  /**
   *
   * @type {Date}
   * @memberof TournamentPostRequest
   */
  checkInStartAt: Date | null;
  /**
   *
   * @type {boolean}
   * @memberof TournamentPostRequest
   */
  openTeamSheets: boolean;
  /**
   *
   * @type {boolean}
   * @memberof TournamentPostRequest
   */
  teamlistsRequired: boolean;
}

/**
 * Check if a given object implements the TournamentPostRequest interface.
 */
export function instanceOfTournamentPostRequest(
  value: object,
): value is TournamentPostRequest {
  if (!("organizationId" in value) || value["organizationId"] === undefined)
    return false;
  if (!("name" in value) || value["name"] === undefined) return false;
  if (!("gameId" in value) || value["gameId"] === undefined) return false;
  if (!("formatId" in value) || value["formatId"] === undefined) return false;
  if (!("autostart" in value) || value["autostart"] === undefined) return false;
  if (!("playerCap" in value) || value["playerCap"] === undefined) return false;
  if (
    !("registrationStartAt" in value) ||
    value["registrationStartAt"] === undefined
  )
    return false;
  if (
    !("registrationEndAt" in value) ||
    value["registrationEndAt"] === undefined
  )
    return false;
  if (!("lateRegistration" in value) || value["lateRegistration"] === undefined)
    return false;
  if (!("checkInStartAt" in value) || value["checkInStartAt"] === undefined)
    return false;
  if (!("openTeamSheets" in value) || value["openTeamSheets"] === undefined)
    return false;
  if (
    !("teamlistsRequired" in value) ||
    value["teamlistsRequired"] === undefined
  )
    return false;
  return true;
}

export function TournamentPostRequestFromJSON(
  json: any,
): TournamentPostRequest {
  return TournamentPostRequestFromJSONTyped(json, false);
}

export function TournamentPostRequestFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): TournamentPostRequest {
  if (json == null) {
    return json;
  }
  return {
    organizationId: json["organization_id"],
    name: json["name"],
    gameId: json["game_id"],
    formatId: json["format_id"],
    autostart: json["autostart"],
    startAt: json["start_at"] == null ? undefined : new Date(json["start_at"]),
    playerCap: json["player_cap"],
    registrationStartAt:
      json["registration_start_at"] == null
        ? null
        : new Date(json["registration_start_at"]),
    registrationEndAt:
      json["registration_end_at"] == null
        ? null
        : new Date(json["registration_end_at"]),
    lateRegistration: json["late_registration"],
    checkInStartAt:
      json["check_in_start_at"] == null
        ? null
        : new Date(json["check_in_start_at"]),
    openTeamSheets: json["open_team_sheets"],
    teamlistsRequired: json["teamlists_required"],
  };
}

export function TournamentPostRequestToJSON(
  value?: TournamentPostRequest | null,
): any {
  if (value == null) {
    return value;
  }
  return {
    organization_id: value["organizationId"],
    name: value["name"],
    game_id: value["gameId"],
    format_id: value["formatId"],
    autostart: value["autostart"],
    start_at:
      value["startAt"] == null ? undefined : value["startAt"].toISOString(),
    player_cap: value["playerCap"],
    registration_start_at:
      value["registrationStartAt"] == null
        ? null
        : (value["registrationStartAt"] as any).toISOString(),
    registration_end_at:
      value["registrationEndAt"] == null
        ? null
        : (value["registrationEndAt"] as any).toISOString(),
    late_registration: value["lateRegistration"],
    check_in_start_at:
      value["checkInStartAt"] == null
        ? null
        : (value["checkInStartAt"] as any).toISOString(),
    open_team_sheets: value["openTeamSheets"],
    teamlists_required: value["teamlistsRequired"],
  };
}
