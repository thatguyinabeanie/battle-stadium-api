/* tslint:disable */
/* eslint-disable */
/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime"
import type { Tournament, TournamentDetails } from "../models/index"
import {
  TournamentFromJSON,
  TournamentToJSON,
  TournamentDetailsFromJSON,
  TournamentDetailsToJSON,
} from "../models/index"

export interface GetTournamentRequest {
  id: number
}

/**
 *
 */
export class TournamentsApi extends runtime.BaseAPI {
  /**
   * Retrieves a specific Tournament.
   * Show Tournament
   */
  async getTournamentRaw(
    requestParameters: GetTournamentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<TournamentDetails>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling getTournament().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/api/v1/tournaments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"]))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) => TournamentDetailsFromJSON(jsonValue))
  }

  /**
   * Retrieves a specific Tournament.
   * Show Tournament
   */
  async getTournament(
    requestParameters: GetTournamentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<TournamentDetails> {
    const response = await this.getTournamentRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Retrieves a list of all Tournaments
   * List Organization Tournaments
   */
  async listTournamentsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<Tournament>>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/api/v1/tournaments`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TournamentFromJSON))
  }

  /**
   * Retrieves a list of all Tournaments
   * List Organization Tournaments
   */
  async listTournaments(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Tournament>> {
    const response = await this.listTournamentsRaw(initOverrides)
    return await response.value()
  }
}
