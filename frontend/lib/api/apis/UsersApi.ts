/* tslint:disable */
/* eslint-disable */
/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { User, UserDetails, UserMe, UserPostRequest } from "../models/index";
import {
  UserFromJSON,
  UserToJSON,
  UserDetailsFromJSON,
  UserDetailsToJSON,
  UserMeFromJSON,
  UserMeToJSON,
  UserPostRequestFromJSON,
  UserPostRequestToJSON,
} from "../models/index";

export interface DeleteUserRequest {
  id: number;
}

export interface GetUserRequest {
  id: number;
}

export interface PatchUserRequest {
  id: number;
  userDetails?: UserDetails;
}

export interface PostUserRequest {
  userPostRequest?: UserPostRequest;
}

/**
 *
 */
export class UsersApi extends runtime.BaseAPI {
  /**
   * Delete User
   */
  async deleteUserRaw(
    requestParameters: DeleteUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError("id", 'Required parameter "id" was null or undefined when calling deleteUser().');
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"]))),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete User
   */
  async deleteUser(
    requestParameters: DeleteUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteUserRaw(requestParameters, initOverrides);
  }

  /**
   * Retrieves the current User.
   * Show Me
   */
  async getMeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserMe>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
    }

    const response = await this.request(
      {
        path: `/api/v1/users/me`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserMeFromJSON(jsonValue));
  }

  /**
   * Retrieves the current User.
   * Show Me
   */
  async getMe(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserMe> {
    const response = await this.getMeRaw(initOverrides);
    return await response.value();
  }

  /**
   * Retrieves a specific User by ID.
   * Show User
   */
  async getUserRaw(
    requestParameters: GetUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserDetails>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError("id", 'Required parameter "id" was null or undefined when calling getUser().');
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"]))),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailsFromJSON(jsonValue));
  }

  /**
   * Retrieves a specific User by ID.
   * Show User
   */
  async getUser(
    requestParameters: GetUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserDetails> {
    const response = await this.getUserRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Retrieves a list of all Users
   * List Users
   */
  async listUsersRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<User>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/users`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
  }

  /**
   * Retrieves a list of all Users
   * List Users
   */
  async listUsers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<User>> {
    const response = await this.listUsersRaw(initOverrides);
    return await response.value();
  }

  /**
   * Updates an existing User.
   * Update User
   */
  async patchUserRaw(
    requestParameters: PatchUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserDetails>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError("id", 'Required parameter "id" was null or undefined when calling patchUser().');
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/v1/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"]))),
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: UserDetailsToJSON(requestParameters["userDetails"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailsFromJSON(jsonValue));
  }

  /**
   * Updates an existing User.
   * Update User
   */
  async patchUser(
    requestParameters: PatchUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserDetails> {
    const response = await this.patchUserRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Creates a new User.
   * Create User
   */
  async postUserRaw(
    requestParameters: PostUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserDetails>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/api/v1/users`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: UserPostRequestToJSON(requestParameters["userPostRequest"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailsFromJSON(jsonValue));
  }

  /**
   * Creates a new User.
   * Create User
   */
  async postUser(
    requestParameters: PostUserRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserDetails> {
    const response = await this.postUserRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
