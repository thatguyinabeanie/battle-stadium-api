/* tslint:disable */
/* eslint-disable */
/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import type { Tournament } from "../model";
// @ts-ignore
import type { TournamentDetails } from "../model";
// @ts-ignore
import type { User } from "../model";
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Retrieves a list of staff members for a specific organization.
     * @summary List Organization Staff
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationStaff: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getOrganizationStaff", "id", id);
      const localVarPath = `/api/v1/organizations/{id}/staff`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Creates a new tournament for an organization.
     * @summary Create Tournament
     * @param {string} id
     * @param {TournamentDetails} [tournamentDetails]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrganizationTournament: async (
      id: string,
      tournamentDetails?: TournamentDetails,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("postOrganizationTournament", "id", id);
      const localVarPath = `/api/v1/organizations/{id}/tournaments`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        tournamentDetails,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     * Retrieves a list of staff members for a specific organization.
     * @summary List Organization Staff
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOrganizationStaff(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getOrganizationStaff(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.getOrganizationStaff"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Creates a new tournament for an organization.
     * @summary Create Tournament
     * @param {string} id
     * @param {TournamentDetails} [tournamentDetails]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postOrganizationTournament(
      id: string,
      tournamentDetails?: TournamentDetails,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tournament>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.postOrganizationTournament(
          id,
          tournamentDetails,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.postOrganizationTournament"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     * Retrieves a list of staff members for a specific organization.
     * @summary List Organization Staff
     * @param {DefaultApiGetOrganizationStaffRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationStaff(
      requestParameters: DefaultApiGetOrganizationStaffRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<User>> {
      return localVarFp
        .getOrganizationStaff(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Creates a new tournament for an organization.
     * @summary Create Tournament
     * @param {DefaultApiPostOrganizationTournamentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrganizationTournament(
      requestParameters: DefaultApiPostOrganizationTournamentRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Tournament> {
      return localVarFp
        .postOrganizationTournament(
          requestParameters.id,
          requestParameters.tournamentDetails,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for getOrganizationStaff operation in DefaultApi.
 * @export
 * @interface DefaultApiGetOrganizationStaffRequest
 */
export interface DefaultApiGetOrganizationStaffRequest {
  /**
   *
   * @type {string}
   * @memberof DefaultApiGetOrganizationStaff
   */
  readonly id: string;
}

/**
 * Request parameters for postOrganizationTournament operation in DefaultApi.
 * @export
 * @interface DefaultApiPostOrganizationTournamentRequest
 */
export interface DefaultApiPostOrganizationTournamentRequest {
  /**
   *
   * @type {string}
   * @memberof DefaultApiPostOrganizationTournament
   */
  readonly id: string;

  /**
   *
   * @type {TournamentDetails}
   * @memberof DefaultApiPostOrganizationTournament
   */
  readonly tournamentDetails?: TournamentDetails;
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   * Retrieves a list of staff members for a specific organization.
   * @summary List Organization Staff
   * @param {DefaultApiGetOrganizationStaffRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getOrganizationStaff(
    requestParameters: DefaultApiGetOrganizationStaffRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .getOrganizationStaff(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Creates a new tournament for an organization.
   * @summary Create Tournament
   * @param {DefaultApiPostOrganizationTournamentRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public postOrganizationTournament(
    requestParameters: DefaultApiPostOrganizationTournamentRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .postOrganizationTournament(
        requestParameters.id,
        requestParameters.tournamentDetails,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
