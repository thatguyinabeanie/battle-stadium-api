/* tslint:disable */
/* eslint-disable */
/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import type { Organization } from "../model";
// @ts-ignore
import type { Tournament } from "../model";
// @ts-ignore
import type { TournamentDetails } from "../model";
// @ts-ignore
import type { User } from "../model";
/**
 * OrganizationsApi - axios parameter creator
 * @export
 */
export const OrganizationsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Deletes an organization.
     * @summary Delete Organization
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganization: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteOrganization", "id", id);
      const localVarPath = `/api/v1/organizations/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieves a specific organization.
     * @summary Show Organization
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getOrganization", "id", id);
      const localVarPath = `/api/v1/organizations/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieves a list of staff members for a specific organization.
     * @summary List Organization Staff
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationStaff: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getOrganizationStaff", "id", id);
      const localVarPath = `/api/v1/organizations/{id}/staff`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary List Organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizations: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/organizations`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Updates an existing organization.
     * @summary Update Organization
     * @param {number} id
     * @param {Organization} [organization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchOrganization: async (
      id: number,
      organization?: Organization,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("patchOrganization", "id", id);
      const localVarPath = `/api/v1/organizations/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        organization,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Updates an existing tournament for a given organization.
     * @summary Update Tournament
     * @param {number} id
     * @param {number} tournamentId
     * @param {TournamentDetails} [tournamentDetails]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchOrganizationTournament: async (
      id: number,
      tournamentId: number,
      tournamentDetails?: TournamentDetails,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("patchOrganizationTournament", "id", id);
      // verify required parameter 'tournamentId' is not null or undefined
      assertParamExists(
        "patchOrganizationTournament",
        "tournamentId",
        tournamentId,
      );
      const localVarPath =
        `/api/v1/organizations/{id}/tournaments/{tournament_id}`
          .replace(`{${"id"}}`, encodeURIComponent(String(id)))
          .replace(
            `{${"tournament_id"}}`,
            encodeURIComponent(String(tournamentId)),
          );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        tournamentDetails,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Creates a new organization.
     * @summary Create Organization
     * @param {Organization} [organization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrganization: async (
      organization?: Organization,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/organizations`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        organization,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Creates a new tournament for a given organization.
     * @summary Create Tournament
     * @param {number} id
     * @param {TournamentDetails} [tournamentDetails]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrganizationTournament: async (
      id: number,
      tournamentDetails?: TournamentDetails,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("postOrganizationTournament", "id", id);
      const localVarPath = `/api/v1/organizations/{id}/tournaments`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        tournamentDetails,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * OrganizationsApi - functional programming interface
 * @export
 */
export const OrganizationsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    OrganizationsApiAxiosParamCreator(configuration);
  return {
    /**
     * Deletes an organization.
     * @summary Delete Organization
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteOrganization(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteOrganization(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["OrganizationsApi.deleteOrganization"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retrieves a specific organization.
     * @summary Show Organization
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOrganization(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganization(
        id,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["OrganizationsApi.getOrganization"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retrieves a list of staff members for a specific organization.
     * @summary List Organization Staff
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOrganizationStaff(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getOrganizationStaff(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["OrganizationsApi.getOrganizationStaff"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary List Organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listOrganizations(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<Organization>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.listOrganizations(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["OrganizationsApi.listOrganizations"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Updates an existing organization.
     * @summary Update Organization
     * @param {number} id
     * @param {Organization} [organization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchOrganization(
      id: number,
      organization?: Organization,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.patchOrganization(
          id,
          organization,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["OrganizationsApi.patchOrganization"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Updates an existing tournament for a given organization.
     * @summary Update Tournament
     * @param {number} id
     * @param {number} tournamentId
     * @param {TournamentDetails} [tournamentDetails]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchOrganizationTournament(
      id: number,
      tournamentId: number,
      tournamentDetails?: TournamentDetails,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tournament>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.patchOrganizationTournament(
          id,
          tournamentId,
          tournamentDetails,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["OrganizationsApi.patchOrganizationTournament"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Creates a new organization.
     * @summary Create Organization
     * @param {Organization} [organization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postOrganization(
      organization?: Organization,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.postOrganization(organization, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["OrganizationsApi.postOrganization"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Creates a new tournament for a given organization.
     * @summary Create Tournament
     * @param {number} id
     * @param {TournamentDetails} [tournamentDetails]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postOrganizationTournament(
      id: number,
      tournamentDetails?: TournamentDetails,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tournament>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.postOrganizationTournament(
          id,
          tournamentDetails,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["OrganizationsApi.postOrganizationTournament"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * OrganizationsApi - factory interface
 * @export
 */
export const OrganizationsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = OrganizationsApiFp(configuration);
  return {
    /**
     * Deletes an organization.
     * @summary Delete Organization
     * @param {OrganizationsApiDeleteOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganization(
      requestParameters: OrganizationsApiDeleteOrganizationRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .deleteOrganization(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieves a specific organization.
     * @summary Show Organization
     * @param {OrganizationsApiGetOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization(
      requestParameters: OrganizationsApiGetOrganizationRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Organization> {
      return localVarFp
        .getOrganization(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieves a list of staff members for a specific organization.
     * @summary List Organization Staff
     * @param {OrganizationsApiGetOrganizationStaffRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationStaff(
      requestParameters: OrganizationsApiGetOrganizationStaffRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<User>> {
      return localVarFp
        .getOrganizationStaff(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary List Organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizations(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<Organization>> {
      return localVarFp
        .listOrganizations(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Updates an existing organization.
     * @summary Update Organization
     * @param {OrganizationsApiPatchOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchOrganization(
      requestParameters: OrganizationsApiPatchOrganizationRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Organization> {
      return localVarFp
        .patchOrganization(
          requestParameters.id,
          requestParameters.organization,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Updates an existing tournament for a given organization.
     * @summary Update Tournament
     * @param {OrganizationsApiPatchOrganizationTournamentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchOrganizationTournament(
      requestParameters: OrganizationsApiPatchOrganizationTournamentRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Tournament> {
      return localVarFp
        .patchOrganizationTournament(
          requestParameters.id,
          requestParameters.tournamentId,
          requestParameters.tournamentDetails,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Creates a new organization.
     * @summary Create Organization
     * @param {OrganizationsApiPostOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrganization(
      requestParameters: OrganizationsApiPostOrganizationRequest = {},
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Organization> {
      return localVarFp
        .postOrganization(requestParameters.organization, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Creates a new tournament for a given organization.
     * @summary Create Tournament
     * @param {OrganizationsApiPostOrganizationTournamentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrganizationTournament(
      requestParameters: OrganizationsApiPostOrganizationTournamentRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Tournament> {
      return localVarFp
        .postOrganizationTournament(
          requestParameters.id,
          requestParameters.tournamentDetails,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for deleteOrganization operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiDeleteOrganizationRequest
 */
export interface OrganizationsApiDeleteOrganizationRequest {
  /**
   *
   * @type {number}
   * @memberof OrganizationsApiDeleteOrganization
   */
  readonly id: number;
}

/**
 * Request parameters for getOrganization operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrganizationRequest
 */
export interface OrganizationsApiGetOrganizationRequest {
  /**
   *
   * @type {number}
   * @memberof OrganizationsApiGetOrganization
   */
  readonly id: number;
}

/**
 * Request parameters for getOrganizationStaff operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrganizationStaffRequest
 */
export interface OrganizationsApiGetOrganizationStaffRequest {
  /**
   *
   * @type {number}
   * @memberof OrganizationsApiGetOrganizationStaff
   */
  readonly id: number;
}

/**
 * Request parameters for patchOrganization operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiPatchOrganizationRequest
 */
export interface OrganizationsApiPatchOrganizationRequest {
  /**
   *
   * @type {number}
   * @memberof OrganizationsApiPatchOrganization
   */
  readonly id: number;

  /**
   *
   * @type {Organization}
   * @memberof OrganizationsApiPatchOrganization
   */
  readonly organization?: Organization;
}

/**
 * Request parameters for patchOrganizationTournament operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiPatchOrganizationTournamentRequest
 */
export interface OrganizationsApiPatchOrganizationTournamentRequest {
  /**
   *
   * @type {number}
   * @memberof OrganizationsApiPatchOrganizationTournament
   */
  readonly id: number;

  /**
   *
   * @type {number}
   * @memberof OrganizationsApiPatchOrganizationTournament
   */
  readonly tournamentId: number;

  /**
   *
   * @type {TournamentDetails}
   * @memberof OrganizationsApiPatchOrganizationTournament
   */
  readonly tournamentDetails?: TournamentDetails;
}

/**
 * Request parameters for postOrganization operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiPostOrganizationRequest
 */
export interface OrganizationsApiPostOrganizationRequest {
  /**
   *
   * @type {Organization}
   * @memberof OrganizationsApiPostOrganization
   */
  readonly organization?: Organization;
}

/**
 * Request parameters for postOrganizationTournament operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiPostOrganizationTournamentRequest
 */
export interface OrganizationsApiPostOrganizationTournamentRequest {
  /**
   *
   * @type {number}
   * @memberof OrganizationsApiPostOrganizationTournament
   */
  readonly id: number;

  /**
   *
   * @type {TournamentDetails}
   * @memberof OrganizationsApiPostOrganizationTournament
   */
  readonly tournamentDetails?: TournamentDetails;
}

/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
export class OrganizationsApi extends BaseAPI {
  /**
   * Deletes an organization.
   * @summary Delete Organization
   * @param {OrganizationsApiDeleteOrganizationRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public deleteOrganization(
    requestParameters: OrganizationsApiDeleteOrganizationRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return OrganizationsApiFp(this.configuration)
      .deleteOrganization(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieves a specific organization.
   * @summary Show Organization
   * @param {OrganizationsApiGetOrganizationRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public getOrganization(
    requestParameters: OrganizationsApiGetOrganizationRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return OrganizationsApiFp(this.configuration)
      .getOrganization(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieves a list of staff members for a specific organization.
   * @summary List Organization Staff
   * @param {OrganizationsApiGetOrganizationStaffRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public getOrganizationStaff(
    requestParameters: OrganizationsApiGetOrganizationStaffRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return OrganizationsApiFp(this.configuration)
      .getOrganizationStaff(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary List Organizations
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public listOrganizations(options?: RawAxiosRequestConfig) {
    return OrganizationsApiFp(this.configuration)
      .listOrganizations(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Updates an existing organization.
   * @summary Update Organization
   * @param {OrganizationsApiPatchOrganizationRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public patchOrganization(
    requestParameters: OrganizationsApiPatchOrganizationRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return OrganizationsApiFp(this.configuration)
      .patchOrganization(
        requestParameters.id,
        requestParameters.organization,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Updates an existing tournament for a given organization.
   * @summary Update Tournament
   * @param {OrganizationsApiPatchOrganizationTournamentRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public patchOrganizationTournament(
    requestParameters: OrganizationsApiPatchOrganizationTournamentRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return OrganizationsApiFp(this.configuration)
      .patchOrganizationTournament(
        requestParameters.id,
        requestParameters.tournamentId,
        requestParameters.tournamentDetails,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Creates a new organization.
   * @summary Create Organization
   * @param {OrganizationsApiPostOrganizationRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public postOrganization(
    requestParameters: OrganizationsApiPostOrganizationRequest = {},
    options?: RawAxiosRequestConfig,
  ) {
    return OrganizationsApiFp(this.configuration)
      .postOrganization(requestParameters.organization, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Creates a new tournament for a given organization.
   * @summary Create Tournament
   * @param {OrganizationsApiPostOrganizationTournamentRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public postOrganizationTournament(
    requestParameters: OrganizationsApiPostOrganizationTournamentRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return OrganizationsApiFp(this.configuration)
      .postOrganizationTournament(
        requestParameters.id,
        requestParameters.tournamentDetails,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
