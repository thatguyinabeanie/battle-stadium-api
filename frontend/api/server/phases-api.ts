/* tslint:disable */
/* eslint-disable */
/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "../configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "../common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "../base";
// @ts-ignore
import type { Phase } from "../model";
// @ts-ignore
import type { PhaseDetails } from "../model";
/**
 * PhasesApi - axios parameter creator
 * @export
 */
export const PhasesApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Deletes a Tournament Phase.
     * @summary Delete Tournament Phase
     * @param {number} tournamentId ID of the tournament
     * @param {number} id ID of the Phase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTournamentPhase: async (
      tournamentId: number,
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tournamentId' is not null or undefined
      assertParamExists("deleteTournamentPhase", "tournamentId", tournamentId);
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteTournamentPhase", "id", id);
      const localVarPath = `/api/v1/tournaments/{tournament_id}/phases/{id}`
        .replace(
          `{${"tournament_id"}}`,
          encodeURIComponent(String(tournamentId)),
        )
        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieves a list of all Phases
     * @summary List Tournament Phases
     * @param {number} tournamentId ID of the tournament
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTournamentPhases: async (
      tournamentId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tournamentId' is not null or undefined
      assertParamExists("listTournamentPhases", "tournamentId", tournamentId);
      const localVarPath = `/api/v1/tournaments/{tournament_id}/phases`.replace(
        `{${"tournament_id"}}`,
        encodeURIComponent(String(tournamentId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Creates a new Tournament Phase.
     * @summary Create Tournament Phase
     * @param {number} tournamentId ID of the tournament
     * @param {Phase} [phase]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postTournamentPhase: async (
      tournamentId: number,
      phase?: Phase,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tournamentId' is not null or undefined
      assertParamExists("postTournamentPhase", "tournamentId", tournamentId);
      const localVarPath = `/api/v1/tournaments/{tournament_id}/phases`.replace(
        `{${"tournament_id"}}`,
        encodeURIComponent(String(tournamentId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        phase,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Updates a Tournament Phase.
     * @summary Update Tournament Phase
     * @param {number} tournamentId ID of the tournament
     * @param {number} id ID of the Phase
     * @param {Phase} [phase]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putTournamentPhase: async (
      tournamentId: number,
      id: number,
      phase?: Phase,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tournamentId' is not null or undefined
      assertParamExists("putTournamentPhase", "tournamentId", tournamentId);
      // verify required parameter 'id' is not null or undefined
      assertParamExists("putTournamentPhase", "id", id);
      const localVarPath = `/api/v1/tournaments/{tournament_id}/phases/{id}`
        .replace(
          `{${"tournament_id"}}`,
          encodeURIComponent(String(tournamentId)),
        )
        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        phase,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieves a Tournament Phase
     * @summary Show Tournament Phase
     * @param {number} tournamentId ID of the tournament
     * @param {number} id ID of the Phase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showTournamentPhase: async (
      tournamentId: number,
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tournamentId' is not null or undefined
      assertParamExists("showTournamentPhase", "tournamentId", tournamentId);
      // verify required parameter 'id' is not null or undefined
      assertParamExists("showTournamentPhase", "id", id);
      const localVarPath = `/api/v1/tournaments/{tournament_id}/phases/{id}`
        .replace(
          `{${"tournament_id"}}`,
          encodeURIComponent(String(tournamentId)),
        )
        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PhasesApi - functional programming interface
 * @export
 */
export const PhasesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PhasesApiAxiosParamCreator(configuration);
  return {
    /**
     * Deletes a Tournament Phase.
     * @summary Delete Tournament Phase
     * @param {number} tournamentId ID of the tournament
     * @param {number} id ID of the Phase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteTournamentPhase(
      tournamentId: number,
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteTournamentPhase(
          tournamentId,
          id,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PhasesApi.deleteTournamentPhase"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retrieves a list of all Phases
     * @summary List Tournament Phases
     * @param {number} tournamentId ID of the tournament
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listTournamentPhases(
      tournamentId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Phase>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.listTournamentPhases(
          tournamentId,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PhasesApi.listTournamentPhases"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Creates a new Tournament Phase.
     * @summary Create Tournament Phase
     * @param {number} tournamentId ID of the tournament
     * @param {Phase} [phase]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postTournamentPhase(
      tournamentId: number,
      phase?: Phase,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhaseDetails>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.postTournamentPhase(
          tournamentId,
          phase,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PhasesApi.postTournamentPhase"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Updates a Tournament Phase.
     * @summary Update Tournament Phase
     * @param {number} tournamentId ID of the tournament
     * @param {number} id ID of the Phase
     * @param {Phase} [phase]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putTournamentPhase(
      tournamentId: number,
      id: number,
      phase?: Phase,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhaseDetails>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.putTournamentPhase(
          tournamentId,
          id,
          phase,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PhasesApi.putTournamentPhase"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retrieves a Tournament Phase
     * @summary Show Tournament Phase
     * @param {number} tournamentId ID of the tournament
     * @param {number} id ID of the Phase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async showTournamentPhase(
      tournamentId: number,
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhaseDetails>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.showTournamentPhase(
          tournamentId,
          id,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PhasesApi.showTournamentPhase"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * PhasesApi - factory interface
 * @export
 */
export const PhasesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PhasesApiFp(configuration);
  return {
    /**
     * Deletes a Tournament Phase.
     * @summary Delete Tournament Phase
     * @param {PhasesApiDeleteTournamentPhaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTournamentPhase(
      requestParameters: PhasesApiDeleteTournamentPhaseRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .deleteTournamentPhase(
          requestParameters.tournamentId,
          requestParameters.id,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieves a list of all Phases
     * @summary List Tournament Phases
     * @param {PhasesApiListTournamentPhasesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTournamentPhases(
      requestParameters: PhasesApiListTournamentPhasesRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<Phase>> {
      return localVarFp
        .listTournamentPhases(requestParameters.tournamentId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Creates a new Tournament Phase.
     * @summary Create Tournament Phase
     * @param {PhasesApiPostTournamentPhaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postTournamentPhase(
      requestParameters: PhasesApiPostTournamentPhaseRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<PhaseDetails> {
      return localVarFp
        .postTournamentPhase(
          requestParameters.tournamentId,
          requestParameters.phase,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Updates a Tournament Phase.
     * @summary Update Tournament Phase
     * @param {PhasesApiPutTournamentPhaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putTournamentPhase(
      requestParameters: PhasesApiPutTournamentPhaseRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<PhaseDetails> {
      return localVarFp
        .putTournamentPhase(
          requestParameters.tournamentId,
          requestParameters.id,
          requestParameters.phase,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieves a Tournament Phase
     * @summary Show Tournament Phase
     * @param {PhasesApiShowTournamentPhaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showTournamentPhase(
      requestParameters: PhasesApiShowTournamentPhaseRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<PhaseDetails> {
      return localVarFp
        .showTournamentPhase(
          requestParameters.tournamentId,
          requestParameters.id,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for deleteTournamentPhase operation in PhasesApi.
 * @export
 * @interface PhasesApiDeleteTournamentPhaseRequest
 */
export interface PhasesApiDeleteTournamentPhaseRequest {
  /**
   * ID of the tournament
   * @type {number}
   * @memberof PhasesApiDeleteTournamentPhase
   */
  readonly tournamentId: number;

  /**
   * ID of the Phase
   * @type {number}
   * @memberof PhasesApiDeleteTournamentPhase
   */
  readonly id: number;
}

/**
 * Request parameters for listTournamentPhases operation in PhasesApi.
 * @export
 * @interface PhasesApiListTournamentPhasesRequest
 */
export interface PhasesApiListTournamentPhasesRequest {
  /**
   * ID of the tournament
   * @type {number}
   * @memberof PhasesApiListTournamentPhases
   */
  readonly tournamentId: number;
}

/**
 * Request parameters for postTournamentPhase operation in PhasesApi.
 * @export
 * @interface PhasesApiPostTournamentPhaseRequest
 */
export interface PhasesApiPostTournamentPhaseRequest {
  /**
   * ID of the tournament
   * @type {number}
   * @memberof PhasesApiPostTournamentPhase
   */
  readonly tournamentId: number;

  /**
   *
   * @type {Phase}
   * @memberof PhasesApiPostTournamentPhase
   */
  readonly phase?: Phase;
}

/**
 * Request parameters for putTournamentPhase operation in PhasesApi.
 * @export
 * @interface PhasesApiPutTournamentPhaseRequest
 */
export interface PhasesApiPutTournamentPhaseRequest {
  /**
   * ID of the tournament
   * @type {number}
   * @memberof PhasesApiPutTournamentPhase
   */
  readonly tournamentId: number;

  /**
   * ID of the Phase
   * @type {number}
   * @memberof PhasesApiPutTournamentPhase
   */
  readonly id: number;

  /**
   *
   * @type {Phase}
   * @memberof PhasesApiPutTournamentPhase
   */
  readonly phase?: Phase;
}

/**
 * Request parameters for showTournamentPhase operation in PhasesApi.
 * @export
 * @interface PhasesApiShowTournamentPhaseRequest
 */
export interface PhasesApiShowTournamentPhaseRequest {
  /**
   * ID of the tournament
   * @type {number}
   * @memberof PhasesApiShowTournamentPhase
   */
  readonly tournamentId: number;

  /**
   * ID of the Phase
   * @type {number}
   * @memberof PhasesApiShowTournamentPhase
   */
  readonly id: number;
}

/**
 * PhasesApi - object-oriented interface
 * @export
 * @class PhasesApi
 * @extends {BaseAPI}
 */
export class PhasesApi extends BaseAPI {
  /**
   * Deletes a Tournament Phase.
   * @summary Delete Tournament Phase
   * @param {PhasesApiDeleteTournamentPhaseRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PhasesApi
   */
  public deleteTournamentPhase(
    requestParameters: PhasesApiDeleteTournamentPhaseRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PhasesApiFp(this.configuration)
      .deleteTournamentPhase(
        requestParameters.tournamentId,
        requestParameters.id,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieves a list of all Phases
   * @summary List Tournament Phases
   * @param {PhasesApiListTournamentPhasesRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PhasesApi
   */
  public listTournamentPhases(
    requestParameters: PhasesApiListTournamentPhasesRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PhasesApiFp(this.configuration)
      .listTournamentPhases(requestParameters.tournamentId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Creates a new Tournament Phase.
   * @summary Create Tournament Phase
   * @param {PhasesApiPostTournamentPhaseRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PhasesApi
   */
  public postTournamentPhase(
    requestParameters: PhasesApiPostTournamentPhaseRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PhasesApiFp(this.configuration)
      .postTournamentPhase(
        requestParameters.tournamentId,
        requestParameters.phase,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Updates a Tournament Phase.
   * @summary Update Tournament Phase
   * @param {PhasesApiPutTournamentPhaseRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PhasesApi
   */
  public putTournamentPhase(
    requestParameters: PhasesApiPutTournamentPhaseRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PhasesApiFp(this.configuration)
      .putTournamentPhase(
        requestParameters.tournamentId,
        requestParameters.id,
        requestParameters.phase,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieves a Tournament Phase
   * @summary Show Tournament Phase
   * @param {PhasesApiShowTournamentPhaseRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PhasesApi
   */
  public showTournamentPhase(
    requestParameters: PhasesApiShowTournamentPhaseRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PhasesApiFp(this.configuration)
      .showTournamentPhase(
        requestParameters.tournamentId,
        requestParameters.id,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
