/* tslint:disable */
/* eslint-disable */
/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CreateGameRequest
 */
export interface CreateGameRequest {
    /**
     * 
     * @type {CreateGameRequestGame}
     * @memberof CreateGameRequest
     */
    'game': CreateGameRequestGame;
}
/**
 * 
 * @export
 * @interface CreateGameRequestGame
 */
export interface CreateGameRequestGame {
    /**
     * 
     * @type {string}
     * @memberof CreateGameRequestGame
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface Game
 */
export interface Game {
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    'slug': string;
}
/**
 * 
 * @export
 * @interface GetGames400Response
 */
export interface GetGames400Response {
    /**
     * 
     * @type {string}
     * @memberof GetGames400Response
     */
    'error': string;
}

/**
 * GamesApi - axios parameter creator
 * @export
 */
export const GamesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new game.
         * @summary Create Game
         * @param {CreateGameRequest} [createGameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGame: async (createGameRequest?: CreateGameRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/games`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGameRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a game by ID.
         * @summary Delete Game
         * @param {string} id ID of the game
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGame: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteGame', 'id', id)
            const localVarPath = `/api/v1/games/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a specific game by ID.
         * @summary Show Game
         * @param {string} id ID of the game
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGame: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getGame', 'id', id)
            const localVarPath = `/api/v1/games/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all games
         * @summary List Games
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGames: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/games`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a game by ID.
         * @summary Update Game
         * @param {string} id ID of the game
         * @param {CreateGameRequest} [createGameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchGame: async (id: string, createGameRequest?: CreateGameRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchGame', 'id', id)
            const localVarPath = `/api/v1/games/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGameRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GamesApi - functional programming interface
 * @export
 */
export const GamesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GamesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new game.
         * @summary Create Game
         * @param {CreateGameRequest} [createGameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGame(createGameRequest?: CreateGameRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Game>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGame(createGameRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GamesApi.createGame']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes a game by ID.
         * @summary Delete Game
         * @param {string} id ID of the game
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGame(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGame(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GamesApi.deleteGame']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a specific game by ID.
         * @summary Show Game
         * @param {string} id ID of the game
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGame(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Game>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGame(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GamesApi.getGame']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a list of all games
         * @summary List Games
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGames(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Game>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGames(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GamesApi.getGames']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates a game by ID.
         * @summary Update Game
         * @param {string} id ID of the game
         * @param {CreateGameRequest} [createGameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchGame(id: string, createGameRequest?: CreateGameRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchGame(id, createGameRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GamesApi.patchGame']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GamesApi - factory interface
 * @export
 */
export const GamesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GamesApiFp(configuration)
    return {
        /**
         * Creates a new game.
         * @summary Create Game
         * @param {CreateGameRequest} [createGameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGame(createGameRequest?: CreateGameRequest, options?: any): AxiosPromise<Game> {
            return localVarFp.createGame(createGameRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a game by ID.
         * @summary Delete Game
         * @param {string} id ID of the game
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGame(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteGame(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a specific game by ID.
         * @summary Show Game
         * @param {string} id ID of the game
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGame(id: string, options?: any): AxiosPromise<Game> {
            return localVarFp.getGame(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all games
         * @summary List Games
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGames(options?: any): AxiosPromise<Array<Game>> {
            return localVarFp.getGames(options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a game by ID.
         * @summary Update Game
         * @param {string} id ID of the game
         * @param {CreateGameRequest} [createGameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchGame(id: string, createGameRequest?: CreateGameRequest, options?: any): AxiosPromise<void> {
            return localVarFp.patchGame(id, createGameRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GamesApi - object-oriented interface
 * @export
 * @class GamesApi
 * @extends {BaseAPI}
 */
export class GamesApi extends BaseAPI {
    /**
     * Creates a new game.
     * @summary Create Game
     * @param {CreateGameRequest} [createGameRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public createGame(createGameRequest?: CreateGameRequest, options?: RawAxiosRequestConfig) {
        return GamesApiFp(this.configuration).createGame(createGameRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a game by ID.
     * @summary Delete Game
     * @param {string} id ID of the game
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public deleteGame(id: string, options?: RawAxiosRequestConfig) {
        return GamesApiFp(this.configuration).deleteGame(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a specific game by ID.
     * @summary Show Game
     * @param {string} id ID of the game
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public getGame(id: string, options?: RawAxiosRequestConfig) {
        return GamesApiFp(this.configuration).getGame(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of all games
     * @summary List Games
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public getGames(options?: RawAxiosRequestConfig) {
        return GamesApiFp(this.configuration).getGames(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a game by ID.
     * @summary Update Game
     * @param {string} id ID of the game
     * @param {CreateGameRequest} [createGameRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public patchGame(id: string, createGameRequest?: CreateGameRequest, options?: RawAxiosRequestConfig) {
        return GamesApiFp(this.configuration).patchGame(id, createGameRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



