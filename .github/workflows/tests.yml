name: Tests

on: [pull_request]

jobs:
  jest:
    runs-on: ubuntu-latest
    env:
      FORCE_JAVASCRIPT_ACTIONS_TO_NODE20: true
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: |
          cd frontend
          npm install
      - name: Run Jest tests
        run: |
          cd frontend
          npm run test
      - name: Upload Jest results
        uses: actions/upload-artifact@v4
        if: always() # This ensures the test results are uploaded even if the Jest step fails
        with:
          name: jest-results
          path: frontend/test-results/jest/results.xml

  rspec:
    runs-on: ubuntu-latest
    env:
      FORCE_JAVASCRIPT_ACTIONS_TO_NODE20: true
      RAILS_ENV: test
    services:
      postgres:
        image: postgres:16.3
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: fuecoco_db_test
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3
          bundler-cache: true
      - name: Install dependencies
        run: |
          mkdir -p ./vendor/bundle
          bundle config set path 'vendor/bundle'
          bundle install
      - name: Prepare database
        run: |
          bundle exec rake db:create db:migrate db:schema:load --trace
        env:
          DATABASE_URL: "postgres://postgres:password@localhost:5432/fuecoco_db_test"
      - name: Run RSpec tests
        run: |
          mkdir -p test-results/rspec
          bundle exec rspec --format RspecJunitFormatter --out test-results/rspec/results.xml
      - name: Upload RSpec results
        uses: actions/upload-artifact@v4
        # Always upload the test results, even if the test run failed
        if: always()
        with:
          name: rspec-results
          path: test-results/rspec/results.xml
