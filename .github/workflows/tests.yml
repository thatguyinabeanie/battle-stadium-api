name: Tests

on: [pull_request]

jobs:
  Rspect-Test-New:
    runs-on: ubuntu-latest
    env:
      RAILS_ENV: test
    services:
      postgres:
        image: postgres:16.3
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.3.4
        bundler-cache: true # This automatically caches gems, no need for manual cache steps
    - name: Prepare database
      run: |
        bundle exec rake db:create db:schema:load --trace
      env:
        # DATABASE_URL: "postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}"
        DATABASE_USERNAME: ${{ secrets.POSTGRES_USER }}
        DATABASE_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        DATABASE_NAME: ${{ secrets.POSTGRES_DB }}
    - name: Run RSpec tests
      env:
        DEVISE_JWT_SECRET_KEY: ${{ secrets.DEVISE_JWT_SECRET_KEY }}
      run: |
        mkdir -p test-results/rspec
        bundle exec rspec --format RspecJunitFormatter --out test-results/rspec/results.xml
    - name: Upload RSpec results
      uses: actions/upload-artifact@v4
      if: ${{ !env.ACT }}
      with:
        name: rspec-results
        path: test-results/rspec/results.xml


  Rubocop-Check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.4
          bundler-cache: true
      - name: Install dependencies
        run: bundle check || bundle install
      - name: Run Rubocop
        run: |
          mkdir -p test-results/rubocop
          bundle exec rubocop --format RuboCop::Formatter::JUnitFormatter --out test-results/rubocop/results.xml
        if: always() # This ensures Rubocop is run even if the RSpec step fails
      - name: Upload Rubocop results
        uses: actions/upload-artifact@v4
        if: ${{ !env.ACT }}
        with:
            name: rubocop-results
            path: test-results/rubocop/results.xml

  Ruby-Audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.4
          bundler-cache: true # This automatically caches gems, no need for manual cache steps
      - uses: actions/checkout@v4
      - name: Run Ruby Audit
        run: bundle exec ruby-audit check
