# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow integrates Brakeman with GitHub's Code Scanning feature
# Brakeman is a static analysis security vulnerability scanner for Ruby on Rails applications

name: Brakeman Scan

on:
  push:
    branches: ["main"]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: ["main"]
  schedule:
    - cron: "35 5 * * 0"

permissions:
  contents: read
env:
  RUBY_VERSION: 3.4
jobs:
  brakeman-scan:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status

    name: Brakeman Scan
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Customize the ruby version depending on your needs
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      # Execute Brakeman CLI and generate a SARIF output with the security issues identified during the analysis
      - name: Scan
        continue-on-error: true
        run: bundle exec brakeman -f sarif -o brakeman-output.json -c brakeman.yml .

      # Upload the SARIF file generated in the previous step
      - name: Upload Brakeman report
        uses: actions/upload-artifact@v4
        with:
          name: brakeman-report
          path: brakeman-output.json
