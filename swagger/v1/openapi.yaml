---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/v1/games":
    get:
      summary: List Games
      tags:
      - Games
      description: Retrieves a list of all games
      operationId: listGames
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Game"
    post:
      summary: Create Game
      tags:
      - Games
      description: Creates a new game.
      operationId: postGame
      parameters: []
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Game"
        '422':
          description: unprocessable entity
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                game:
                  type: object
                  title: postGame
                  properties:
                    name:
                      type: string
                  required:
                  - name
              required:
              - game
  "/api/v1/games/{id}":
    parameters:
    - name: id
      in: path
      description: ID of the game
      required: true
      schema:
        type: string
    get:
      summary: Show Game
      tags:
      - Games
      description: Retrieves a specific game by ID.
      operationId: getGame
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Game"
        '404':
          description: not found
    patch:
      summary: Update Game
      tags:
      - Games
      description: Updates a game by ID.
      operationId: patchGame
      parameters: []
      responses:
        '200':
          description: successful
        '404':
          description: not found
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                game:
                  type: object
                  properties:
                    name:
                      type: string
                  required:
                  - name
              required:
              - game
    delete:
      summary: Delete Game
      tags:
      - Games
      description: Deletes a game by ID.
      operationId: deleteGame
      responses:
        '200':
          description: successful
        '404':
          description: not found
  "/api/v1/organizations":
    get:
      summary: List Organizations
      tags:
      - Organizations
      operationId: listOrganizations
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Organization"
    post:
      summary: Create Organization
      tags:
      - Organizations
      description: Creates a new organization.
      operationId: postOrganization
      parameters: []
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Organization"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                organization:
                  type: object
                  title: postOrganization
                  properties:
                    name:
                      type: string
                    description:
                      type: string
                    owner_id:
                      type: integer
                  required:
                  - name
                  - description
  "/api/v1/organizations/{id}":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: string
    get:
      summary: Show Organization
      tags:
      - Organizations
      description: Retrieves a specific organization.
      operationId: getOrganization
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Organization"
        '404':
          description: not found
    patch:
      summary: Update Organization
      tags:
      - Organizations
      description: Updates an existing organization.
      operationId: patchOrganization
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Organization"
        '404':
          description: not found
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                organization:
                  type: object
                  title: patchOrganization
                  properties:
                    name:
                      type: string
                    description:
                      type: string
                    owner_id:
                      type: integer
                  required:
                  - name
                  - description
    delete:
      summary: Delete Organization
      tags:
      - Organizations
      description: Deletes an organization.
      operationId: deleteOrganization
      responses:
        '200':
          description: Organization deleted
        '404':
          description: not found
  "/api/v1/users":
    get:
      summary: List Users
      tags:
      - Users
      description: Retrieves a list of all Users
      operationId: listUsers
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/User"
    post:
      summary: Create User
      tags:
      - Users
      description: Creates a new User.
      operationId: postUser
      parameters: []
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserDetails"
        '422':
          description: unprocessable entity
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  title: postUser
                  properties:
                    username:
                      type: string
                    email:
                      type: string
                    first_name:
                      type: string
                    last_name:
                      type: string
                    pronouns:
                      type: string
                    password:
                      type: string
                    password_confirmation:
                      type: string
                  required:
                  - username
                  - email
                  - first_name
                  - last_name
                  - password
                  - password_confirmation
  "/api/v1/users/{id}":
    parameters:
    - name: id
      in: path
      description: ID of the User
      required: true
      schema:
        type: integer
    get:
      summary: Show User
      tags:
      - Users
      description: Retrieves a specific User by ID.
      operationId: getUser
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserDetails"
        '404':
          description: not found
    patch:
      summary: Update User
      tags:
      - Users
      description: Updates an existing User.
      operationId: patchUser
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"
        '404':
          description: not found
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  title: patchUser
                  properties:
                    username:
                      type: string
                    email:
                      type: string
                    password:
                      type: string
                    first_name:
                      type: string
                    last_name:
                      type: string
                    pronouns:
                      type: string
                  required:
                  - username
                  - email
                  - password
                  - first_name
                  - last_name
              required:
              - user
    delete:
      summary: Delete User
      tags:
      - Users
      operationId: deleteUser
      responses:
        '200':
          description: successful
        '404':
          description: not found
servers:
- url: https://{defaultHost}
  variables:
    defaultHost:
      default: 127.0.0.1
components:
  responses:
    NotFound:
      description: Not found
  schemas:
    User:
      type: object
      title: User
      properties:
        id:
          type: integer
        username:
          type: string
        pronouns:
          type: string
      required:
      - id
      - username
      - pronouns
    UserDetails:
      type: object
      title: UserDetails
      allOf:
      - "$ref": "#/components/schemas/User"
      - properties:
          email:
            type: string
          first_name:
            type: string
          last_name:
            type: string
          slug:
            type: string
    Game:
      type: object
      title: Game
      properties:
        id:
          type: integer
        name:
          type: string
        slug:
          type: string
      required:
      - name
      - slug
    Organization:
      type: object
      title: Organization
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        slug:
          type: string
        owner:
          "$ref": "#/components/schemas/User"
      required:
      - name
