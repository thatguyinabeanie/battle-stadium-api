---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/v1/games":
    get:
      summary: List Games
      tags:
      - Games
      description: Retrieves a list of all games
      operationId: listGames
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Game"
    post:
      summary: Create Game
      tags:
      - Games
      description: Creates a new game.
      operationId: postGame
      parameters: []
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GameDetail"
        '400':
          description: bad reqiest
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Game"
  "/api/v1/games/{id}":
    parameters:
    - name: id
      in: path
      description: ID of the game
      required: true
      schema:
        type: integer
    get:
      summary: Show Game
      tags:
      - Games
      description: Retrieves a specific game by ID.
      operationId: getGame
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GameDetail"
        '404':
          description: not found
    patch:
      summary: Update Game
      tags:
      - Games
      description: Updates a game by ID.
      operationId: patchGame
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GameDetail"
        '404':
          description: not found
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Game"
    delete:
      summary: Delete Game
      tags:
      - Games
      description: Deletes a game by ID.
      operationId: deleteGame
      responses:
        '200':
          description: successful
        '404':
          description: not found
  "/api/v1/organizations":
    get:
      summary: List Organizations
      tags:
      - Organizations
      operationId: listOrganizations
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Organization"
    post:
      summary: Create Organization
      tags:
      - Organizations
      description: Creates a new organization.
      operationId: postOrganization
      parameters: []
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OrganizationDetails"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Organization"
  "/api/v1/organizations/{id}":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: string
    get:
      summary: Show Organization
      tags:
      - Organizations
      description: Retrieves a specific organization.
      operationId: getOrganization
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OrganizationDetails"
        '404':
          description: not found
    patch:
      summary: Update Organization
      tags:
      - Organizations
      description: Updates an existing organization.
      operationId: patchOrganization
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/OrganizationDetails"
        '404':
          description: not found
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Organization"
    delete:
      summary: Delete Organization
      tags:
      - Organizations
      description: Deletes an organization.
      operationId: deleteOrganization
      responses:
        '200':
          description: Organization deleted
        '404':
          description: not found
  "/api/v1/organizations/{id}/staff":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: string
    get:
      summary: List Organization Staff
      tags:
      - Organizations
      description: Retrieves a list of staff members for a specific organization.
      operationId: getOrganizationStaff
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/User"
        '404':
          description: not found
  "/api/v1/tournaments/{tournament_id}/phases":
    parameters:
    - name: tournament_id
      in: path
      description: ID of the tournament
      required: true
      schema:
        type: integer
    get:
      summary: List Tournament Phases
      tags:
      - Phases
      description: Retrieves a list of all Phases
      operationId: listTournamentPhases
      responses:
        '404':
          description: not found
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Phase"
    post:
      summary: Create Tournament Phase
      tags:
      - Phases
      description: Creates a new Tournament Phase.
      operationId: postTournamentPhase
      parameters: []
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PhaseDetails"
        '404':
          description: not found
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Phase"
  "/api/v1/tournaments/{tournament_id}/phases/{id}":
    parameters:
    - name: tournament_id
      in: path
      description: ID of the tournament
      required: true
      schema:
        type: integer
    - name: id
      in: path
      required: true
      description: ID of the Phase
      schema:
        type: integer
    get:
      summary: Show Tournament Phase
      tags:
      - Phases
      description: Retrieves a Tournament Phase
      operationId: showTournamentPhase
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PhaseDetails"
        '404':
          description: not found
    put:
      summary: Update Tournament Phase
      tags:
      - Phases
      description: Updates a Tournament Phase.
      operationId: putTournamentPhase
      parameters: []
      responses:
        '404':
          description: not found
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PhaseDetails"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Phase"
    delete:
      summary: Delete Tournament Phase
      tags:
      - Phases
      description: Deletes a Tournament Phase.
      operationId: deleteTournamentPhase
      responses:
        '200':
          description: successful
        '404':
          description: not found
  "/api/v1/tournaments/{tournament_id}/players":
    parameters:
    - name: tournament_id
      in: path
      description: ID of the Tournament
      required: true
      schema:
        type: integer
    get:
      summary: List Tournament Players
      tags:
      - Players
      description: Retrieves a list of all Players
      operationId: listPlayers
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Player"
        '404':
          description: not found
    post:
      summary: Create Tournament Player
      tags:
      - Players
      description: Creates a new Player.
      operationId: postTournamentPlayer
      parameters: []
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PlayerDetails"
        '422':
          description: unprocessable entity
        '404':
          description: not found
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PlayerRequest"
  "/api/v1/tournaments/{tournament_id}/players/{id}":
    parameters:
    - name: tournament_id
      in: path
      description: ID of the Tournament
      required: true
      schema:
        type: integer
    - name: id
      in: path
      description: ID of the Player
      required: true
      schema:
        type: integer
    get:
      summary: Show Tournament Player
      tags:
      - Players
      description: Retrieves a Player
      operationId: showTournamentPlayer
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PlayerDetails"
    patch:
      summary: Update Tournament Player
      tags:
      - Players
      description: Updates a Player.
      operationId: putTournamentPlayer
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PlayerDetails"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PlayerRequest"
    delete:
      summary: Delete Tournament Player
      tags:
      - Players
      description: Deletes a Player.
      operationId: deleteTournamentPlayer
      responses:
        '200':
          description: successful
        '404':
          description: not found
  "/api/v1/organizations/{organization_id}/tournaments":
    parameters:
    - name: organization_id
      in: path
      description: ID of the Organization
      required: true
      schema:
        type: integer
    get:
      summary: List Tournaments
      tags:
      - Tournaments
      description: Retrieves a list of all Tournaments
      operationId: listTournaments
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Tournament"
    post:
      summary: Create Tournament
      tags:
      - Tournaments
      description: Creates a new Tournament.
      operationId: postTournament
      parameters: []
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TournamentDetails"
        '422':
          description: unprocessable entity
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TournamentDetails"
  "/api/v1/organizations/{organization_id}/tournaments/{id}":
    parameters:
    - name: organization_id
      in: path
      description: ID of the Organization
      required: true
      schema:
        type: integer
    - name: id
      in: path
      description: ID of the Tournament
      required: true
      schema:
        type: integer
    get:
      summary: Show Tournament
      tags:
      - Tournaments
      description: Retrieves a specific Tournament.
      operationId: getTournament
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TournamentDetails"
        '404':
          description: not found
    put:
      summary: Update Tournament
      tags:
      - Tournaments
      description: Updates a Tournament.
      operationId: putTournament
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TournamentDetails"
        '422':
          description: unprocessable entity
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TournamentDetails"
    delete:
      summary: Delete Tournament
      tags:
      - Tournaments
      description: Deletes a Tournament.
      operationId: deleteTournament
      responses:
        '200':
          description: successful
        '404':
          description: not found
  "/api/v1/users":
    get:
      summary: List Users
      tags:
      - Users
      description: Retrieves a list of all Users
      operationId: listUsers
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/User"
    post:
      summary: Create User
      tags:
      - Users
      description: Creates a new User.
      operationId: postUser
      parameters: []
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserDetails"
        '422':
          description: unprocessable entity
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserRequest"
  "/api/v1/users/{id}":
    parameters:
    - name: id
      in: path
      description: ID of the User
      required: true
      schema:
        type: integer
    get:
      summary: Show User
      tags:
      - Users
      description: Retrieves a specific User by ID.
      operationId: getUser
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserDetails"
        '404':
          description: not found
    patch:
      summary: Update User
      tags:
      - Users
      description: Updates an existing User.
      operationId: patchUser
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserDetails"
        '404':
          description: not found
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserDetails"
    delete:
      summary: Delete User
      tags:
      - Users
      operationId: deleteUser
      responses:
        '200':
          description: successful
        '404':
          description: not found
servers:
- url: https://{defaultHost}
  variables:
    defaultHost:
      default: 127.0.0.1
components:
  responses:
    NotFound:
      description: Not found
  schemas:
    Format:
      type: object
      title: Format
      properties:
        id:
          type: integer
        name:
          type: string
    Game:
      type: object
      title: Game
      properties:
        id:
          type: integer
        name:
          type: string
      required:
      - id
      - name
    GameDetail:
      type: object
      title: Game Details
      properties:
        id:
          type: integer
        name:
          type: string
        formats:
          type: array
          items:
            "$ref": "#/components/schemas/Format"
      required:
      - id
      - name
      - formats
    User:
      type: object
      title: User
      properties:
        id:
          type: integer
        username:
          type: string
        pronouns:
          type: string
      required:
      - id
      - username
      - pronouns
    UserDetails:
      type: object
      title: User Details
      properties:
        id:
          type: integer
        username:
          type: string
        pronouns:
          type: string
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
      required:
      - id
      - username
      - pronouns
      - email
      - first_name
      - last_name
    UserRequest:
      type: object
      title: User Details with Password
      properties:
        id:
          type: integer
        username:
          type: string
        pronouns:
          type: string
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        password:
          type: string
          minLength: 8
          format: password
          title: Password
          description: Must be at least 8 characters
        password_confirmation:
          type: string
          minLength: 8
          format: password
          title: Password Confirmation
          description: Must match the password.
      required:
      - id
      - username
      - pronouns
      - email
      - first_name
      - last_name
      - password
      - password_confirmation
    Organization:
      type: object
      title: Organization
      properties:
        id:
          type: integer
        name:
          type: string
        owner:
          "$ref": "#/components/schemas/User"
      required:
      - id
      - name
      - owner
    OrganizationDetails:
      type: object
      title: Organization Details
      properties:
        id:
          type: integer
        name:
          type: string
        owner:
          "$ref": "#/components/schemas/UserDetails"
        description:
          type: string
        updated_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
      required:
      - id
      - name
      - owner
      - description
      - created_at
      - updated_at
    Tournament:
      type: object
      title: Tournament
      properties:
        id:
          type: integer
        name:
          type: string
        player_cap:
          type: integer
          nullable: true
      required:
      - id
      - name
      - player_cap
    TournamentDetails:
      type: object
      title: Tournament Details
      properties:
        id:
          type: integer
        name:
          type: string
        player_cap:
          type: integer
          nullable: true
        autostart:
          type: boolean
        start_at:
          type: string
          format: date-time
          nullable: true
        end_at:
          type: string
          format: date-time
          nullable: true
        started_at:
          type: string
          format: date-time
          nullable: true
        ended_at:
          type: string
          format: date-time
          nullable: true
        check_in_required:
          type: boolean
        late_check_in:
          type: boolean
        check_in_start_at:
          type: string
          format: date-time
          nullable: true
        late_registration:
          type: boolean
        registration_start_at:
          type: string
          format: date-time
          nullable: true
        registration_end_at:
          type: string
          format: date-time
          nullable: true
        teamlists_required:
          type: boolean
        open_team_sheets:
          type: boolean
      required:
      - id
      - name
      - player_cap
      - start_at
      - player_cap
      - autostart
      - teamlists_required
      - open_team_sheets
      - check_in_required
      - late_check_in
      - check_in_start_at
      - late_registration
      - registration_start_at
      - registration_end_at
    PokemonSet:
      type: object
      title: Pokemon Set
      properties:
        id:
          type: integer
        name:
          type: string
        nickname:
          type: string
          nullable: true
        ability:
          type: string
        tera_type:
          type: string
        nature:
          type: string
        held_item:
          type: string
          nullable: true
        move1:
          type: string
          nullable: true
        move2:
          type: string
          nullable: true
        move3:
          type: string
          nullable: true
        move4:
          type: string
          nullable: true
      required:
      - id
      - name
      - ability
      - tera_type
      - nature
      - held_item
      - move1
      - move2
      - move3
      - move4
    PlayerRequest:
      type: object
      title: Player Request
      properties:
        user_id:
          type: integer
        in_game_name:
          type: string
      required:
      - user_id
      - in_game_name
    Player:
      type: object
      title: Player
      properties:
        id:
          type: integer
        user:
          "$ref": "#/components/schemas/User"
        in_game_name:
          type: string
        checked_in:
          type: boolean
        checked_in_at:
          type: string
          format: date-time
          nullable: true
        team_sheet_submitted:
          type: boolean
        team_sheet_submitted_at:
          type: string
          format: date-time
          nullable: true
      required:
      - id
      - user
      - in_game_name
      - checked_in
      - checked_in_at
      - team_sheet_submitted
      - team_sheet_submitted_at
    PlayerDetails:
      type: object
      title: Player Details
      properties:
        id:
          type: integer
        user:
          "$ref": "#/components/schemas/User"
        in_game_name:
          type: string
        checked_in:
          type: boolean
        checked_in_at:
          type: string
          format: date-time
          nullable: true
        team_sheet_submitted:
          type: boolean
        team_sheet_submitted_at:
          type: string
          format: date-time
          nullable: true
        pokemon_sets:
          type: array
          items:
            "$ref": "#/components/schemas/PokemonSet"
      required:
      - id
      - user
      - in_game_name
      - checked_in
      - checked_in_at
      - team_sheet_submitted
      - team_sheet_submitted_at
      - pokemon_sets
    Round:
      type: object
      title: Round
      properties:
        id:
          type: integer
        phase_id:
          type: integer
        round_number:
          type: integer
        started_at:
          type: string
          format: date-time
          nullable: true
        ended_at:
          type: string
          format: date-time
          nullable: true
      required:
      - id
      - phase_id
      - round_number
      - started_at
      - ended_at
    Phase:
      type: object
      title: Phase
      properties:
        id:
          type: integer
        name:
          type: string
        order:
          type: integer
        type:
          type: string
        tournament_id:
          type: integer
        number_of_rounds:
          type: integer
        best_of:
          type: integer
        criteria:
          type: string
          nullable: true
        started_at:
          type: string
          format: date-time
          nullable: true
        ended_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
      - id
      - name
      - order
      - tournament_id
      - number_of_rounds
      - best_of
      - criteria
      - started_at
      - ended_at
    PhaseDetails:
      type: object
      title: Phase Details
      properties:
        id:
          type: integer
        name:
          type: string
        order:
          type: integer
        type:
          type: string
        tournament_id:
          type: integer
        number_of_rounds:
          type: integer
        best_of:
          type: integer
        criteria:
          type: string
          nullable: true
        started_at:
          type: string
          format: date-time
          nullable: true
        ended_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        players:
          type: array
          items:
            "$ref": "#/components/schemas/Player"
        rounds:
          type: array
          items:
            "$ref": "#/components/schemas/Round"
      required:
      - id
      - name
      - order
      - tournament_id
      - number_of_rounds
      - best_of
      - criteria
      - started_at
      - ended_at
      - players
      - rounds
    GameRequest:
      type: object
      title: GameRequest
      properties:
        name:
          type: string
      required:
      - name
