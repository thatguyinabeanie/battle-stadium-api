/* tslint:disable */
/* eslint-disable */
/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// @ts-ignore
import type { Configuration } from "./configuration";

import type {
  // @ts-ignore
  AxiosPromise,
  // @ts-ignore
  AxiosInstance,
  // @ts-ignore
  RawAxiosRequestConfig,
} from "axios";
// @ts-ignore
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  // @ts-ignore
  // setApiKeyToObject,
  // @ts-ignore
  // setBasicAuthToObject,
  // @ts-ignore
  // setBearerAuthToObject,
  // @ts-ignore
  // setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
// @ts-ignore
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  // @ts-ignore
  // COLLECTION_FORMATS,
  BaseAPI,
  // @ts-ignore
  RequiredError,
  operationServerMap,
} from "./base";

/**
 *
 * @export
 * @interface Format
 */
export interface Format {
  /**
   *
   * @type {number}
   * @memberof Format
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof Format
   */
  name?: string;
}
/**
 *
 * @export
 * @interface Game
 */
export interface Game {
  /**
   *
   * @type {number}
   * @memberof Game
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof Game
   */
  name: string;
}
/**
 *
 * @export
 * @interface GameDetail
 */
export interface GameDetail {
  /**
   *
   * @type {number}
   * @memberof GameDetail
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof GameDetail
   */
  name: string;
  /**
   *
   * @type {Array<Format>}
   * @memberof GameDetail
   */
  formats: Array<Format>;
}
/**
 *
 * @export
 * @interface Organization
 */
export interface Organization {
  /**
   *
   * @type {number}
   * @memberof Organization
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof Organization
   */
  name: string;
  /**
   *
   * @type {User}
   * @memberof Organization
   */
  owner: User;
}
/**
 *
 * @export
 * @interface OrganizationDetails
 */
export interface OrganizationDetails {
  /**
   *
   * @type {number}
   * @memberof OrganizationDetails
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof OrganizationDetails
   */
  name: string;
  /**
   *
   * @type {UserDetails}
   * @memberof OrganizationDetails
   */
  owner: UserDetails;
  /**
   *
   * @type {string}
   * @memberof OrganizationDetails
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof OrganizationDetails
   */
  updated_at: string;
  /**
   *
   * @type {string}
   * @memberof OrganizationDetails
   */
  created_at: string;
}
/**
 *
 * @export
 * @interface PatchGameRequest
 */
export interface PatchGameRequest {
  /**
   *
   * @type {PatchGameRequestGame}
   * @memberof PatchGameRequest
   */
  game: PatchGameRequestGame;
}
/**
 *
 * @export
 * @interface PatchGameRequestGame
 */
export interface PatchGameRequestGame {
  /**
   *
   * @type {string}
   * @memberof PatchGameRequestGame
   */
  name: string;
}
/**
 *
 * @export
 * @interface PatchOrganization
 */
export interface PatchOrganization {
  /**
   *
   * @type {string}
   * @memberof PatchOrganization
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof PatchOrganization
   */
  description: string;
  /**
   *
   * @type {number}
   * @memberof PatchOrganization
   */
  owner_id?: number;
}
/**
 *
 * @export
 * @interface PatchOrganizationRequest
 */
export interface PatchOrganizationRequest {
  /**
   *
   * @type {PatchOrganization}
   * @memberof PatchOrganizationRequest
   */
  organization?: PatchOrganization;
}
/**
 *
 * @export
 * @interface PatchUser
 */
export interface PatchUser {
  /**
   *
   * @type {string}
   * @memberof PatchUser
   */
  username: string;
  /**
   *
   * @type {string}
   * @memberof PatchUser
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof PatchUser
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof PatchUser
   */
  first_name: string;
  /**
   *
   * @type {string}
   * @memberof PatchUser
   */
  last_name: string;
  /**
   *
   * @type {string}
   * @memberof PatchUser
   */
  pronouns?: string;
}
/**
 *
 * @export
 * @interface Phase
 */
export interface Phase {
  /**
   *
   * @type {number}
   * @memberof Phase
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof Phase
   */
  name: string;
  /**
   *
   * @type {number}
   * @memberof Phase
   */
  order: number;
  /**
   *
   * @type {string}
   * @memberof Phase
   */
  type?: string;
  /**
   *
   * @type {number}
   * @memberof Phase
   */
  tournament_id: number;
  /**
   *
   * @type {number}
   * @memberof Phase
   */
  number_of_rounds: number;
  /**
   *
   * @type {number}
   * @memberof Phase
   */
  best_of: number;
  /**
   *
   * @type {string}
   * @memberof Phase
   */
  criteria: string | null;
  /**
   *
   * @type {string}
   * @memberof Phase
   */
  started_at: string | null;
  /**
   *
   * @type {string}
   * @memberof Phase
   */
  ended_at: string | null;
  /**
   *
   * @type {string}
   * @memberof Phase
   */
  created_at?: string;
  /**
   *
   * @type {string}
   * @memberof Phase
   */
  updated_at?: string;
}
/**
 *
 * @export
 * @interface PhaseDetails
 */
export interface PhaseDetails {
  /**
   *
   * @type {number}
   * @memberof PhaseDetails
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof PhaseDetails
   */
  name: string;
  /**
   *
   * @type {number}
   * @memberof PhaseDetails
   */
  order: number;
  /**
   *
   * @type {string}
   * @memberof PhaseDetails
   */
  type?: string;
  /**
   *
   * @type {number}
   * @memberof PhaseDetails
   */
  tournament_id: number;
  /**
   *
   * @type {number}
   * @memberof PhaseDetails
   */
  number_of_rounds: number;
  /**
   *
   * @type {number}
   * @memberof PhaseDetails
   */
  best_of: number;
  /**
   *
   * @type {string}
   * @memberof PhaseDetails
   */
  criteria: string | null;
  /**
   *
   * @type {string}
   * @memberof PhaseDetails
   */
  started_at: string | null;
  /**
   *
   * @type {string}
   * @memberof PhaseDetails
   */
  ended_at: string | null;
  /**
   *
   * @type {string}
   * @memberof PhaseDetails
   */
  created_at?: string;
  /**
   *
   * @type {string}
   * @memberof PhaseDetails
   */
  updated_at?: string;
  /**
   *
   * @type {Array<Player>}
   * @memberof PhaseDetails
   */
  players: Array<Player>;
  /**
   *
   * @type {Array<Round>}
   * @memberof PhaseDetails
   */
  rounds: Array<Round>;
}
/**
 *
 * @export
 * @interface Player
 */
export interface Player {
  /**
   *
   * @type {number}
   * @memberof Player
   */
  id: number;
  /**
   *
   * @type {User}
   * @memberof Player
   */
  user: User;
  /**
   *
   * @type {string}
   * @memberof Player
   */
  in_game_name?: string;
  /**
   *
   * @type {boolean}
   * @memberof Player
   */
  checked_in: boolean;
  /**
   *
   * @type {string}
   * @memberof Player
   */
  checked_in_at: string | null;
  /**
   *
   * @type {boolean}
   * @memberof Player
   */
  team_sheet_submitted: boolean;
  /**
   *
   * @type {string}
   * @memberof Player
   */
  team_sheet_submitted_at: string | null;
}
/**
 *
 * @export
 * @interface PlayerDetails
 */
export interface PlayerDetails {
  /**
   *
   * @type {number}
   * @memberof PlayerDetails
   */
  id: number;
  /**
   *
   * @type {User}
   * @memberof PlayerDetails
   */
  user: User;
  /**
   *
   * @type {string}
   * @memberof PlayerDetails
   */
  in_game_name?: string;
  /**
   *
   * @type {boolean}
   * @memberof PlayerDetails
   */
  checked_in: boolean;
  /**
   *
   * @type {string}
   * @memberof PlayerDetails
   */
  checked_in_at: string | null;
  /**
   *
   * @type {boolean}
   * @memberof PlayerDetails
   */
  team_sheet_submitted: boolean;
  /**
   *
   * @type {string}
   * @memberof PlayerDetails
   */
  team_sheet_submitted_at: string | null;
  /**
   *
   * @type {Array<PokemonSet>}
   * @memberof PlayerDetails
   */
  pokemon_sets: Array<PokemonSet>;
}
/**
 *
 * @export
 * @interface PokemonSet
 */
export interface PokemonSet {
  /**
   *
   * @type {number}
   * @memberof PokemonSet
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof PokemonSet
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof PokemonSet
   */
  nickname?: string | null;
  /**
   *
   * @type {string}
   * @memberof PokemonSet
   */
  ability: string;
  /**
   *
   * @type {string}
   * @memberof PokemonSet
   */
  tera_type: string;
  /**
   *
   * @type {string}
   * @memberof PokemonSet
   */
  nature: string;
  /**
   *
   * @type {string}
   * @memberof PokemonSet
   */
  held_item: string | null;
  /**
   *
   * @type {string}
   * @memberof PokemonSet
   */
  move1: string | null;
  /**
   *
   * @type {string}
   * @memberof PokemonSet
   */
  move2: string | null;
  /**
   *
   * @type {string}
   * @memberof PokemonSet
   */
  move3: string | null;
  /**
   *
   * @type {string}
   * @memberof PokemonSet
   */
  move4: string | null;
}
/**
 *
 * @export
 * @interface PostGame
 */
export interface PostGame {
  /**
   *
   * @type {string}
   * @memberof PostGame
   */
  name: string;
}
/**
 *
 * @export
 * @interface PostGameRequest
 */
export interface PostGameRequest {
  /**
   *
   * @type {PostGame}
   * @memberof PostGameRequest
   */
  game: PostGame;
}
/**
 *
 * @export
 * @interface PostOrganization
 */
export interface PostOrganization {
  /**
   *
   * @type {string}
   * @memberof PostOrganization
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof PostOrganization
   */
  description: string;
  /**
   *
   * @type {number}
   * @memberof PostOrganization
   */
  owner_id?: number;
}
/**
 *
 * @export
 * @interface PostOrganizationRequest
 */
export interface PostOrganizationRequest {
  /**
   *
   * @type {PostOrganization}
   * @memberof PostOrganizationRequest
   */
  organization?: PostOrganization;
}
/**
 *
 * @export
 * @interface PostPhase
 */
export interface PostPhase {
  /**
   *
   * @type {number}
   * @memberof PostPhase
   */
  number_of_rounds: number;
  /**
   *
   * @type {number}
   * @memberof PostPhase
   */
  best_of: number;
  /**
   *
   * @type {string}
   * @memberof PostPhase
   */
  type: PostPhaseTypeEnum;
}

export const PostPhaseTypeEnum = {
  Swiss: "Phase::Swiss",
  SingleElimination: "Phase::SingleElimination",
} as const;

export type PostPhaseTypeEnum =
  (typeof PostPhaseTypeEnum)[keyof typeof PostPhaseTypeEnum];

/**
 *
 * @export
 * @interface PostPlayer
 */
export interface PostPlayer {
  /**
   *
   * @type {number}
   * @memberof PostPlayer
   */
  user_id: number;
  /**
   *
   * @type {string}
   * @memberof PostPlayer
   */
  in_game_name: string;
}
/**
 *
 * @export
 * @interface PostTournament
 */
export interface PostTournament {
  /**
   *
   * @type {string}
   * @memberof PostTournament
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof PostTournament
   */
  start_at?: string;
  /**
   *
   * @type {string}
   * @memberof PostTournament
   */
  end_at?: string;
  /**
   *
   * @type {number}
   * @memberof PostTournament
   */
  game_id: number;
  /**
   *
   * @type {number}
   * @memberof PostTournament
   */
  format_id: number;
  /**
   *
   * @type {boolean}
   * @memberof PostTournament
   */
  auto_start?: boolean;
  /**
   *
   * @type {number}
   * @memberof PostTournament
   */
  player_cap?: number;
  /**
   *
   * @type {string}
   * @memberof PostTournament
   */
  registration_start_at?: string;
  /**
   *
   * @type {string}
   * @memberof PostTournament
   */
  registration_end_at?: string;
  /**
   *
   * @type {boolean}
   * @memberof PostTournament
   */
  late_registration?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PostTournament
   */
  check_in_required?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PostTournament
   */
  late_check_in?: boolean;
  /**
   *
   * @type {string}
   * @memberof PostTournament
   */
  check_in_start_at?: string;
  /**
   *
   * @type {string}
   * @memberof PostTournament
   */
  check_in_end_at?: string;
  /**
   *
   * @type {boolean}
   * @memberof PostTournament
   */
  open_team_sheets?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PostTournament
   */
  teamlists_required?: boolean;
}
/**
 *
 * @export
 * @interface PostTournamentPhaseRequest
 */
export interface PostTournamentPhaseRequest {
  /**
   *
   * @type {PostPhase}
   * @memberof PostTournamentPhaseRequest
   */
  phase?: PostPhase;
}
/**
 *
 * @export
 * @interface PostTournamentPlayerRequest
 */
export interface PostTournamentPlayerRequest {
  /**
   *
   * @type {PostPlayer}
   * @memberof PostTournamentPlayerRequest
   */
  player?: PostPlayer;
}
/**
 *
 * @export
 * @interface PostUser
 */
export interface PostUser {
  /**
   *
   * @type {string}
   * @memberof PostUser
   */
  username: string;
  /**
   *
   * @type {string}
   * @memberof PostUser
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof PostUser
   */
  first_name: string;
  /**
   *
   * @type {string}
   * @memberof PostUser
   */
  last_name: string;
  /**
   *
   * @type {string}
   * @memberof PostUser
   */
  pronouns?: string;
  /**
   *
   * @type {string}
   * @memberof PostUser
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof PostUser
   */
  password_confirmation: string;
}
/**
 *
 * @export
 * @interface PutPhase
 */
export interface PutPhase {
  /**
   *
   * @type {string}
   * @memberof PutPhase
   */
  name?: string;
  /**
   *
   * @type {number}
   * @memberof PutPhase
   */
  number_of_rounds?: number;
  /**
   *
   * @type {number}
   * @memberof PutPhase
   */
  best_of?: number;
  /**
   *
   * @type {string}
   * @memberof PutPhase
   */
  type?: PutPhaseTypeEnum;
}

export const PutPhaseTypeEnum = {
  Swiss: "Phase::Swiss",
  SingleElimination: "Phase::SingleElimination",
} as const;

export type PutPhaseTypeEnum =
  (typeof PutPhaseTypeEnum)[keyof typeof PutPhaseTypeEnum];

/**
 *
 * @export
 * @interface PutPlayer
 */
export interface PutPlayer {
  /**
   *
   * @type {boolean}
   * @memberof PutPlayer
   */
  team_sheet_submitted: boolean;
}
/**
 *
 * @export
 * @interface PutTournamentPhaseRequest
 */
export interface PutTournamentPhaseRequest {
  /**
   *
   * @type {PutPhase}
   * @memberof PutTournamentPhaseRequest
   */
  phase?: PutPhase;
}
/**
 *
 * @export
 * @interface PutTournamentPlayerRequest
 */
export interface PutTournamentPlayerRequest {
  /**
   *
   * @type {PutPlayer}
   * @memberof PutTournamentPlayerRequest
   */
  player?: PutPlayer;
}
/**
 *
 * @export
 * @interface Round
 */
export interface Round {
  /**
   *
   * @type {number}
   * @memberof Round
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof Round
   */
  phase_id: number;
  /**
   *
   * @type {number}
   * @memberof Round
   */
  round_number: number;
  /**
   *
   * @type {string}
   * @memberof Round
   */
  started_at: string | null;
  /**
   *
   * @type {string}
   * @memberof Round
   */
  ended_at: string | null;
}
/**
 *
 * @export
 * @interface Tournament
 */
export interface Tournament {
  /**
   *
   * @type {number}
   * @memberof Tournament
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof Tournament
   */
  name: string;
  /**
   *
   * @type {number}
   * @memberof Tournament
   */
  player_cap: number | null;
}
/**
 *
 * @export
 * @interface TournamentDetails
 */
export interface TournamentDetails {
  /**
   *
   * @type {number}
   * @memberof TournamentDetails
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof TournamentDetails
   */
  name: string;
  /**
   *
   * @type {number}
   * @memberof TournamentDetails
   */
  player_cap: number | null;
  /**
   *
   * @type {boolean}
   * @memberof TournamentDetails
   */
  autostart: boolean;
  /**
   *
   * @type {string}
   * @memberof TournamentDetails
   */
  start_at: string | null;
  /**
   *
   * @type {string}
   * @memberof TournamentDetails
   */
  end_at?: string | null;
  /**
   *
   * @type {string}
   * @memberof TournamentDetails
   */
  started_at?: string | null;
  /**
   *
   * @type {string}
   * @memberof TournamentDetails
   */
  ended_at?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof TournamentDetails
   */
  check_in_required: boolean;
  /**
   *
   * @type {boolean}
   * @memberof TournamentDetails
   */
  late_check_in: boolean;
  /**
   *
   * @type {string}
   * @memberof TournamentDetails
   */
  check_in_start_at: string | null;
  /**
   *
   * @type {boolean}
   * @memberof TournamentDetails
   */
  late_registration: boolean;
  /**
   *
   * @type {string}
   * @memberof TournamentDetails
   */
  registration_start_at: string | null;
  /**
   *
   * @type {string}
   * @memberof TournamentDetails
   */
  registration_end_at: string | null;
  /**
   *
   * @type {boolean}
   * @memberof TournamentDetails
   */
  teamlists_required: boolean;
  /**
   *
   * @type {boolean}
   * @memberof TournamentDetails
   */
  open_team_sheets: boolean;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {number}
   * @memberof User
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof User
   */
  username: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  pronouns: string;
}
/**
 *
 * @export
 * @interface UserDetails
 */
export interface UserDetails {
  /**
   *
   * @type {number}
   * @memberof UserDetails
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof UserDetails
   */
  username: string;
  /**
   *
   * @type {string}
   * @memberof UserDetails
   */
  pronouns: string;
  /**
   *
   * @type {string}
   * @memberof UserDetails
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UserDetails
   */
  first_name: string;
  /**
   *
   * @type {string}
   * @memberof UserDetails
   */
  last_name: string;
}

/**
 * GamesApi - axios parameter creator
 * @export
 */
export const GamesApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Deletes a game by ID.
     * @summary Delete Game
     * @param {string} id ID of the game
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGame: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteGame", "id", id);
      const localVarPath = `/api/v1/games/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieves a specific game by ID.
     * @summary Show Game
     * @param {string} id ID of the game
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGame: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getGame", "id", id);
      const localVarPath = `/api/v1/games/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieves a list of all games
     * @summary List Games
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listGames: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/games`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Updates a game by ID.
     * @summary Update Game
     * @param {string} id ID of the game
     * @param {PatchGameRequest} [patchGameRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchGame: async (
      id: string,
      patchGameRequest?: PatchGameRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("patchGame", "id", id);
      const localVarPath = `/api/v1/games/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchGameRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Creates a new game.
     * @summary Create Game
     * @param {PostGameRequest} [postGameRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postGame: async (
      postGameRequest?: PostGameRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/games`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postGameRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * GamesApi - functional programming interface
 * @export
 */
export const GamesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = GamesApiAxiosParamCreator(configuration);
  return {
    /**
     * Deletes a game by ID.
     * @summary Delete Game
     * @param {string} id ID of the game
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteGame(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGame(
        id,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GamesApi.deleteGame"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retrieves a specific game by ID.
     * @summary Show Game
     * @param {string} id ID of the game
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getGame(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameDetail>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getGame(
        id,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GamesApi.getGame"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retrieves a list of all games
     * @summary List Games
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listGames(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Game>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.listGames(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GamesApi.listGames"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Updates a game by ID.
     * @summary Update Game
     * @param {string} id ID of the game
     * @param {PatchGameRequest} [patchGameRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchGame(
      id: string,
      patchGameRequest?: PatchGameRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameDetail>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.patchGame(
        id,
        patchGameRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GamesApi.patchGame"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Creates a new game.
     * @summary Create Game
     * @param {PostGameRequest} [postGameRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postGame(
      postGameRequest?: PostGameRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameDetail>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postGame(
        postGameRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["GamesApi.postGame"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * GamesApi - factory interface
 * @export
 */
export const GamesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = GamesApiFp(configuration);
  return {
    /**
     * Deletes a game by ID.
     * @summary Delete Game
     * @param {string} id ID of the game
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGame(
      id: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .deleteGame(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieves a specific game by ID.
     * @summary Show Game
     * @param {string} id ID of the game
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGame(
      id: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<GameDetail> {
      return localVarFp
        .getGame(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieves a list of all games
     * @summary List Games
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listGames(options?: RawAxiosRequestConfig): AxiosPromise<Array<Game>> {
      return localVarFp
        .listGames(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Updates a game by ID.
     * @summary Update Game
     * @param {string} id ID of the game
     * @param {PatchGameRequest} [patchGameRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchGame(
      id: string,
      patchGameRequest?: PatchGameRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<GameDetail> {
      return localVarFp
        .patchGame(id, patchGameRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Creates a new game.
     * @summary Create Game
     * @param {PostGameRequest} [postGameRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postGame(
      postGameRequest?: PostGameRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<GameDetail> {
      return localVarFp
        .postGame(postGameRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * GamesApi - object-oriented interface
 * @export
 * @class GamesApi
 * @extends {BaseAPI}
 */
export class GamesApi extends BaseAPI {
  /**
   * Deletes a game by ID.
   * @summary Delete Game
   * @param {string} id ID of the game
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GamesApi
   */
  public deleteGame(id: string, options?: RawAxiosRequestConfig) {
    return GamesApiFp(this.configuration)
      .deleteGame(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieves a specific game by ID.
   * @summary Show Game
   * @param {string} id ID of the game
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GamesApi
   */
  public getGame(id: string, options?: RawAxiosRequestConfig) {
    return GamesApiFp(this.configuration)
      .getGame(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieves a list of all games
   * @summary List Games
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GamesApi
   */
  public listGames(options?: RawAxiosRequestConfig) {
    return GamesApiFp(this.configuration)
      .listGames(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Updates a game by ID.
   * @summary Update Game
   * @param {string} id ID of the game
   * @param {PatchGameRequest} [patchGameRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GamesApi
   */
  public patchGame(
    id: string,
    patchGameRequest?: PatchGameRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return GamesApiFp(this.configuration)
      .patchGame(id, patchGameRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Creates a new game.
   * @summary Create Game
   * @param {PostGameRequest} [postGameRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GamesApi
   */
  public postGame(
    postGameRequest?: PostGameRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return GamesApiFp(this.configuration)
      .postGame(postGameRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * OrganizationsApi - axios parameter creator
 * @export
 */
export const OrganizationsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Deletes an organization.
     * @summary Delete Organization
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganization: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteOrganization", "id", id);
      const localVarPath = `/api/v1/organizations/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieves a specific organization.
     * @summary Show Organization
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getOrganization", "id", id);
      const localVarPath = `/api/v1/organizations/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieves a list of staff members for a specific organization.
     * @summary List Organization Staff
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationStaff: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getOrganizationStaff", "id", id);
      const localVarPath = `/api/v1/organizations/{id}/staff`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary List Organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizations: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/organizations`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Updates an existing organization.
     * @summary Update Organization
     * @param {string} id
     * @param {PatchOrganizationRequest} [patchOrganizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchOrganization: async (
      id: string,
      patchOrganizationRequest?: PatchOrganizationRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("patchOrganization", "id", id);
      const localVarPath = `/api/v1/organizations/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchOrganizationRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Creates a new organization.
     * @summary Create Organization
     * @param {PostOrganizationRequest} [postOrganizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrganization: async (
      postOrganizationRequest?: PostOrganizationRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/organizations`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postOrganizationRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * OrganizationsApi - functional programming interface
 * @export
 */
export const OrganizationsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    OrganizationsApiAxiosParamCreator(configuration);
  return {
    /**
     * Deletes an organization.
     * @summary Delete Organization
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteOrganization(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteOrganization(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["OrganizationsApi.deleteOrganization"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retrieves a specific organization.
     * @summary Show Organization
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOrganization(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<OrganizationDetails>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganization(
        id,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["OrganizationsApi.getOrganization"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retrieves a list of staff members for a specific organization.
     * @summary List Organization Staff
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOrganizationStaff(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getOrganizationStaff(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["OrganizationsApi.getOrganizationStaff"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary List Organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listOrganizations(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<Organization>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.listOrganizations(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["OrganizationsApi.listOrganizations"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Updates an existing organization.
     * @summary Update Organization
     * @param {string} id
     * @param {PatchOrganizationRequest} [patchOrganizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchOrganization(
      id: string,
      patchOrganizationRequest?: PatchOrganizationRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<OrganizationDetails>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.patchOrganization(
          id,
          patchOrganizationRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["OrganizationsApi.patchOrganization"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Creates a new organization.
     * @summary Create Organization
     * @param {PostOrganizationRequest} [postOrganizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postOrganization(
      postOrganizationRequest?: PostOrganizationRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<OrganizationDetails>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.postOrganization(
          postOrganizationRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["OrganizationsApi.postOrganization"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * OrganizationsApi - factory interface
 * @export
 */
export const OrganizationsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = OrganizationsApiFp(configuration);
  return {
    /**
     * Deletes an organization.
     * @summary Delete Organization
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganization(
      id: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .deleteOrganization(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieves a specific organization.
     * @summary Show Organization
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization(
      id: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<OrganizationDetails> {
      return localVarFp
        .getOrganization(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieves a list of staff members for a specific organization.
     * @summary List Organization Staff
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationStaff(
      id: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<User>> {
      return localVarFp
        .getOrganizationStaff(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary List Organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizations(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<Organization>> {
      return localVarFp
        .listOrganizations(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Updates an existing organization.
     * @summary Update Organization
     * @param {string} id
     * @param {PatchOrganizationRequest} [patchOrganizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchOrganization(
      id: string,
      patchOrganizationRequest?: PatchOrganizationRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<OrganizationDetails> {
      return localVarFp
        .patchOrganization(id, patchOrganizationRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Creates a new organization.
     * @summary Create Organization
     * @param {PostOrganizationRequest} [postOrganizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrganization(
      postOrganizationRequest?: PostOrganizationRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<OrganizationDetails> {
      return localVarFp
        .postOrganization(postOrganizationRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
export class OrganizationsApi extends BaseAPI {
  /**
   * Deletes an organization.
   * @summary Delete Organization
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public deleteOrganization(id: string, options?: RawAxiosRequestConfig) {
    return OrganizationsApiFp(this.configuration)
      .deleteOrganization(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieves a specific organization.
   * @summary Show Organization
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public getOrganization(id: string, options?: RawAxiosRequestConfig) {
    return OrganizationsApiFp(this.configuration)
      .getOrganization(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieves a list of staff members for a specific organization.
   * @summary List Organization Staff
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public getOrganizationStaff(id: string, options?: RawAxiosRequestConfig) {
    return OrganizationsApiFp(this.configuration)
      .getOrganizationStaff(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary List Organizations
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public listOrganizations(options?: RawAxiosRequestConfig) {
    return OrganizationsApiFp(this.configuration)
      .listOrganizations(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Updates an existing organization.
   * @summary Update Organization
   * @param {string} id
   * @param {PatchOrganizationRequest} [patchOrganizationRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public patchOrganization(
    id: string,
    patchOrganizationRequest?: PatchOrganizationRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return OrganizationsApiFp(this.configuration)
      .patchOrganization(id, patchOrganizationRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Creates a new organization.
   * @summary Create Organization
   * @param {PostOrganizationRequest} [postOrganizationRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public postOrganization(
    postOrganizationRequest?: PostOrganizationRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return OrganizationsApiFp(this.configuration)
      .postOrganization(postOrganizationRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PhasesApi - axios parameter creator
 * @export
 */
export const PhasesApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Deletes a Tournament Phase.
     * @summary Delete Tournament Phase
     * @param {number} tournamentId ID of the tournament
     * @param {number} id ID of the Phase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTournamentPhase: async (
      tournamentId: number,
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tournamentId' is not null or undefined
      assertParamExists("deleteTournamentPhase", "tournamentId", tournamentId);
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteTournamentPhase", "id", id);
      const localVarPath = `/api/v1/tournaments/{tournament_id}/phases/{id}`
        .replace(
          `{${"tournament_id"}}`,
          encodeURIComponent(String(tournamentId)),
        )
        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieves a list of all Phases
     * @summary List Tournament Phases
     * @param {number} tournamentId ID of the tournament
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTournamentPhases: async (
      tournamentId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tournamentId' is not null or undefined
      assertParamExists("listTournamentPhases", "tournamentId", tournamentId);
      const localVarPath = `/api/v1/tournaments/{tournament_id}/phases`.replace(
        `{${"tournament_id"}}`,
        encodeURIComponent(String(tournamentId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Creates a new Tournament Phase.
     * @summary Create Tournament Phase
     * @param {number} tournamentId ID of the tournament
     * @param {PostTournamentPhaseRequest} postTournamentPhaseRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postTournamentPhase: async (
      tournamentId: number,
      postTournamentPhaseRequest: PostTournamentPhaseRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tournamentId' is not null or undefined
      assertParamExists("postTournamentPhase", "tournamentId", tournamentId);
      // verify required parameter 'postTournamentPhaseRequest' is not null or undefined
      assertParamExists(
        "postTournamentPhase",
        "postTournamentPhaseRequest",
        postTournamentPhaseRequest,
      );
      const localVarPath = `/api/v1/tournaments/{tournament_id}/phases`.replace(
        `{${"tournament_id"}}`,
        encodeURIComponent(String(tournamentId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postTournamentPhaseRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Updates a Tournament Phase.
     * @summary Update Tournament Phase
     * @param {number} tournamentId ID of the tournament
     * @param {number} id ID of the Phase
     * @param {PutTournamentPhaseRequest} putTournamentPhaseRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putTournamentPhase: async (
      tournamentId: number,
      id: number,
      putTournamentPhaseRequest: PutTournamentPhaseRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tournamentId' is not null or undefined
      assertParamExists("putTournamentPhase", "tournamentId", tournamentId);
      // verify required parameter 'id' is not null or undefined
      assertParamExists("putTournamentPhase", "id", id);
      // verify required parameter 'putTournamentPhaseRequest' is not null or undefined
      assertParamExists(
        "putTournamentPhase",
        "putTournamentPhaseRequest",
        putTournamentPhaseRequest,
      );
      const localVarPath = `/api/v1/tournaments/{tournament_id}/phases/{id}`
        .replace(
          `{${"tournament_id"}}`,
          encodeURIComponent(String(tournamentId)),
        )
        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        putTournamentPhaseRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieves a Tournament Phase
     * @summary Show Tournament Phase
     * @param {number} tournamentId ID of the tournament
     * @param {number} id ID of the Phase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showTournamentPhase: async (
      tournamentId: number,
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tournamentId' is not null or undefined
      assertParamExists("showTournamentPhase", "tournamentId", tournamentId);
      // verify required parameter 'id' is not null or undefined
      assertParamExists("showTournamentPhase", "id", id);
      const localVarPath = `/api/v1/tournaments/{tournament_id}/phases/{id}`
        .replace(
          `{${"tournament_id"}}`,
          encodeURIComponent(String(tournamentId)),
        )
        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PhasesApi - functional programming interface
 * @export
 */
export const PhasesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PhasesApiAxiosParamCreator(configuration);
  return {
    /**
     * Deletes a Tournament Phase.
     * @summary Delete Tournament Phase
     * @param {number} tournamentId ID of the tournament
     * @param {number} id ID of the Phase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteTournamentPhase(
      tournamentId: number,
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteTournamentPhase(
          tournamentId,
          id,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PhasesApi.deleteTournamentPhase"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retrieves a list of all Phases
     * @summary List Tournament Phases
     * @param {number} tournamentId ID of the tournament
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listTournamentPhases(
      tournamentId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Phase>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.listTournamentPhases(
          tournamentId,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PhasesApi.listTournamentPhases"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Creates a new Tournament Phase.
     * @summary Create Tournament Phase
     * @param {number} tournamentId ID of the tournament
     * @param {PostTournamentPhaseRequest} postTournamentPhaseRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postTournamentPhase(
      tournamentId: number,
      postTournamentPhaseRequest: PostTournamentPhaseRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhaseDetails>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.postTournamentPhase(
          tournamentId,
          postTournamentPhaseRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PhasesApi.postTournamentPhase"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Updates a Tournament Phase.
     * @summary Update Tournament Phase
     * @param {number} tournamentId ID of the tournament
     * @param {number} id ID of the Phase
     * @param {PutTournamentPhaseRequest} putTournamentPhaseRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putTournamentPhase(
      tournamentId: number,
      id: number,
      putTournamentPhaseRequest: PutTournamentPhaseRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhaseDetails>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.putTournamentPhase(
          tournamentId,
          id,
          putTournamentPhaseRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PhasesApi.putTournamentPhase"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retrieves a Tournament Phase
     * @summary Show Tournament Phase
     * @param {number} tournamentId ID of the tournament
     * @param {number} id ID of the Phase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async showTournamentPhase(
      tournamentId: number,
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhaseDetails>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.showTournamentPhase(
          tournamentId,
          id,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PhasesApi.showTournamentPhase"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * PhasesApi - factory interface
 * @export
 */
export const PhasesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PhasesApiFp(configuration);
  return {
    /**
     * Deletes a Tournament Phase.
     * @summary Delete Tournament Phase
     * @param {number} tournamentId ID of the tournament
     * @param {number} id ID of the Phase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTournamentPhase(
      tournamentId: number,
      id: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .deleteTournamentPhase(tournamentId, id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieves a list of all Phases
     * @summary List Tournament Phases
     * @param {number} tournamentId ID of the tournament
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTournamentPhases(
      tournamentId: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<Phase>> {
      return localVarFp
        .listTournamentPhases(tournamentId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Creates a new Tournament Phase.
     * @summary Create Tournament Phase
     * @param {number} tournamentId ID of the tournament
     * @param {PostTournamentPhaseRequest} postTournamentPhaseRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postTournamentPhase(
      tournamentId: number,
      postTournamentPhaseRequest: PostTournamentPhaseRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<PhaseDetails> {
      return localVarFp
        .postTournamentPhase(tournamentId, postTournamentPhaseRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Updates a Tournament Phase.
     * @summary Update Tournament Phase
     * @param {number} tournamentId ID of the tournament
     * @param {number} id ID of the Phase
     * @param {PutTournamentPhaseRequest} putTournamentPhaseRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putTournamentPhase(
      tournamentId: number,
      id: number,
      putTournamentPhaseRequest: PutTournamentPhaseRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<PhaseDetails> {
      return localVarFp
        .putTournamentPhase(
          tournamentId,
          id,
          putTournamentPhaseRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieves a Tournament Phase
     * @summary Show Tournament Phase
     * @param {number} tournamentId ID of the tournament
     * @param {number} id ID of the Phase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showTournamentPhase(
      tournamentId: number,
      id: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<PhaseDetails> {
      return localVarFp
        .showTournamentPhase(tournamentId, id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PhasesApi - object-oriented interface
 * @export
 * @class PhasesApi
 * @extends {BaseAPI}
 */
export class PhasesApi extends BaseAPI {
  /**
   * Deletes a Tournament Phase.
   * @summary Delete Tournament Phase
   * @param {number} tournamentId ID of the tournament
   * @param {number} id ID of the Phase
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PhasesApi
   */
  public deleteTournamentPhase(
    tournamentId: number,
    id: number,
    options?: RawAxiosRequestConfig,
  ) {
    return PhasesApiFp(this.configuration)
      .deleteTournamentPhase(tournamentId, id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieves a list of all Phases
   * @summary List Tournament Phases
   * @param {number} tournamentId ID of the tournament
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PhasesApi
   */
  public listTournamentPhases(
    tournamentId: number,
    options?: RawAxiosRequestConfig,
  ) {
    return PhasesApiFp(this.configuration)
      .listTournamentPhases(tournamentId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Creates a new Tournament Phase.
   * @summary Create Tournament Phase
   * @param {number} tournamentId ID of the tournament
   * @param {PostTournamentPhaseRequest} postTournamentPhaseRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PhasesApi
   */
  public postTournamentPhase(
    tournamentId: number,
    postTournamentPhaseRequest: PostTournamentPhaseRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PhasesApiFp(this.configuration)
      .postTournamentPhase(tournamentId, postTournamentPhaseRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Updates a Tournament Phase.
   * @summary Update Tournament Phase
   * @param {number} tournamentId ID of the tournament
   * @param {number} id ID of the Phase
   * @param {PutTournamentPhaseRequest} putTournamentPhaseRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PhasesApi
   */
  public putTournamentPhase(
    tournamentId: number,
    id: number,
    putTournamentPhaseRequest: PutTournamentPhaseRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PhasesApiFp(this.configuration)
      .putTournamentPhase(tournamentId, id, putTournamentPhaseRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieves a Tournament Phase
   * @summary Show Tournament Phase
   * @param {number} tournamentId ID of the tournament
   * @param {number} id ID of the Phase
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PhasesApi
   */
  public showTournamentPhase(
    tournamentId: number,
    id: number,
    options?: RawAxiosRequestConfig,
  ) {
    return PhasesApiFp(this.configuration)
      .showTournamentPhase(tournamentId, id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PlayersApi - axios parameter creator
 * @export
 */
export const PlayersApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Deletes a Player.
     * @summary Delete Tournament Player
     * @param {number} id
     * @param {number} tournamentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTournamentPlayer: async (
      id: number,
      tournamentId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteTournamentPlayer", "id", id);
      // verify required parameter 'tournamentId' is not null or undefined
      assertParamExists("deleteTournamentPlayer", "tournamentId", tournamentId);
      const localVarPath = `/api/v1/tournaments/{tournament_id}/players/{id}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(
          `{${"tournament_id"}}`,
          encodeURIComponent(String(tournamentId)),
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieves a list of all Players
     * @summary List Tournament Players
     * @param {number} tournamentId ID of the Tournament
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPlayers: async (
      tournamentId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tournamentId' is not null or undefined
      assertParamExists("listPlayers", "tournamentId", tournamentId);
      const localVarPath =
        `/api/v1/tournaments/{tournament_id}/players`.replace(
          `{${"tournament_id"}}`,
          encodeURIComponent(String(tournamentId)),
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Creates a new Player.
     * @summary Create Tournament Player
     * @param {number} tournamentId ID of the Tournament
     * @param {number} organizationId ID of the Organization
     * @param {PostTournamentPlayerRequest} [postTournamentPlayerRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postTournamentPlayer: async (
      tournamentId: number,
      organizationId: number,
      postTournamentPlayerRequest?: PostTournamentPlayerRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tournamentId' is not null or undefined
      assertParamExists("postTournamentPlayer", "tournamentId", tournamentId);
      // verify required parameter 'organizationId' is not null or undefined
      assertParamExists(
        "postTournamentPlayer",
        "organizationId",
        organizationId,
      );
      const localVarPath = `/api/v1/tournaments/{tournament_id}/players`
        .replace(
          `{${"tournament_id"}}`,
          encodeURIComponent(String(tournamentId)),
        )
        .replace(
          `{${"organization_id"}}`,
          encodeURIComponent(String(organizationId)),
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postTournamentPlayerRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Updates a Player.
     * @summary Update Tournament Player
     * @param {number} id
     * @param {number} tournamentId
     * @param {PutTournamentPlayerRequest} [putTournamentPlayerRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putTournamentPlayer: async (
      id: number,
      tournamentId: number,
      putTournamentPlayerRequest?: PutTournamentPlayerRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("putTournamentPlayer", "id", id);
      // verify required parameter 'tournamentId' is not null or undefined
      assertParamExists("putTournamentPlayer", "tournamentId", tournamentId);
      const localVarPath = `/api/v1/tournaments/{tournament_id}/players/{id}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(
          `{${"tournament_id"}}`,
          encodeURIComponent(String(tournamentId)),
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        putTournamentPlayerRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieves a Player
     * @summary Show Tournament Player
     * @param {number} tournamentId ID of the Tournament
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showTournamentPlayer: async (
      tournamentId: number,
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tournamentId' is not null or undefined
      assertParamExists("showTournamentPlayer", "tournamentId", tournamentId);
      // verify required parameter 'id' is not null or undefined
      assertParamExists("showTournamentPlayer", "id", id);
      const localVarPath = `/api/v1/tournaments/{tournament_id}/players/{id}`
        .replace(
          `{${"tournament_id"}}`,
          encodeURIComponent(String(tournamentId)),
        )
        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PlayersApi - functional programming interface
 * @export
 */
export const PlayersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PlayersApiAxiosParamCreator(configuration);
  return {
    /**
     * Deletes a Player.
     * @summary Delete Tournament Player
     * @param {number} id
     * @param {number} tournamentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteTournamentPlayer(
      id: number,
      tournamentId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteTournamentPlayer(
          id,
          tournamentId,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PlayersApi.deleteTournamentPlayer"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retrieves a list of all Players
     * @summary List Tournament Players
     * @param {number} tournamentId ID of the Tournament
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listPlayers(
      tournamentId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Player>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listPlayers(
        tournamentId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PlayersApi.listPlayers"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Creates a new Player.
     * @summary Create Tournament Player
     * @param {number} tournamentId ID of the Tournament
     * @param {number} organizationId ID of the Organization
     * @param {PostTournamentPlayerRequest} [postTournamentPlayerRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postTournamentPlayer(
      tournamentId: number,
      organizationId: number,
      postTournamentPlayerRequest?: PostTournamentPlayerRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerDetails>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.postTournamentPlayer(
          tournamentId,
          organizationId,
          postTournamentPlayerRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PlayersApi.postTournamentPlayer"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Updates a Player.
     * @summary Update Tournament Player
     * @param {number} id
     * @param {number} tournamentId
     * @param {PutTournamentPlayerRequest} [putTournamentPlayerRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putTournamentPlayer(
      id: number,
      tournamentId: number,
      putTournamentPlayerRequest?: PutTournamentPlayerRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerDetails>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.putTournamentPlayer(
          id,
          tournamentId,
          putTournamentPlayerRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PlayersApi.putTournamentPlayer"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retrieves a Player
     * @summary Show Tournament Player
     * @param {number} tournamentId ID of the Tournament
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async showTournamentPlayer(
      tournamentId: number,
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerDetails>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.showTournamentPlayer(
          tournamentId,
          id,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["PlayersApi.showTournamentPlayer"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * PlayersApi - factory interface
 * @export
 */
export const PlayersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PlayersApiFp(configuration);
  return {
    /**
     * Deletes a Player.
     * @summary Delete Tournament Player
     * @param {number} id
     * @param {number} tournamentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTournamentPlayer(
      id: number,
      tournamentId: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .deleteTournamentPlayer(id, tournamentId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieves a list of all Players
     * @summary List Tournament Players
     * @param {number} tournamentId ID of the Tournament
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPlayers(
      tournamentId: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<Player>> {
      return localVarFp
        .listPlayers(tournamentId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Creates a new Player.
     * @summary Create Tournament Player
     * @param {number} tournamentId ID of the Tournament
     * @param {number} organizationId ID of the Organization
     * @param {PostTournamentPlayerRequest} [postTournamentPlayerRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postTournamentPlayer(
      tournamentId: number,
      organizationId: number,
      postTournamentPlayerRequest?: PostTournamentPlayerRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<PlayerDetails> {
      return localVarFp
        .postTournamentPlayer(
          tournamentId,
          organizationId,
          postTournamentPlayerRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Updates a Player.
     * @summary Update Tournament Player
     * @param {number} id
     * @param {number} tournamentId
     * @param {PutTournamentPlayerRequest} [putTournamentPlayerRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putTournamentPlayer(
      id: number,
      tournamentId: number,
      putTournamentPlayerRequest?: PutTournamentPlayerRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<PlayerDetails> {
      return localVarFp
        .putTournamentPlayer(
          id,
          tournamentId,
          putTournamentPlayerRequest,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieves a Player
     * @summary Show Tournament Player
     * @param {number} tournamentId ID of the Tournament
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showTournamentPlayer(
      tournamentId: number,
      id: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<PlayerDetails> {
      return localVarFp
        .showTournamentPlayer(tournamentId, id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PlayersApi - object-oriented interface
 * @export
 * @class PlayersApi
 * @extends {BaseAPI}
 */
export class PlayersApi extends BaseAPI {
  /**
   * Deletes a Player.
   * @summary Delete Tournament Player
   * @param {number} id
   * @param {number} tournamentId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlayersApi
   */
  public deleteTournamentPlayer(
    id: number,
    tournamentId: number,
    options?: RawAxiosRequestConfig,
  ) {
    return PlayersApiFp(this.configuration)
      .deleteTournamentPlayer(id, tournamentId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieves a list of all Players
   * @summary List Tournament Players
   * @param {number} tournamentId ID of the Tournament
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlayersApi
   */
  public listPlayers(tournamentId: number, options?: RawAxiosRequestConfig) {
    return PlayersApiFp(this.configuration)
      .listPlayers(tournamentId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Creates a new Player.
   * @summary Create Tournament Player
   * @param {number} tournamentId ID of the Tournament
   * @param {number} organizationId ID of the Organization
   * @param {PostTournamentPlayerRequest} [postTournamentPlayerRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlayersApi
   */
  public postTournamentPlayer(
    tournamentId: number,
    organizationId: number,
    postTournamentPlayerRequest?: PostTournamentPlayerRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PlayersApiFp(this.configuration)
      .postTournamentPlayer(
        tournamentId,
        organizationId,
        postTournamentPlayerRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Updates a Player.
   * @summary Update Tournament Player
   * @param {number} id
   * @param {number} tournamentId
   * @param {PutTournamentPlayerRequest} [putTournamentPlayerRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlayersApi
   */
  public putTournamentPlayer(
    id: number,
    tournamentId: number,
    putTournamentPlayerRequest?: PutTournamentPlayerRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PlayersApiFp(this.configuration)
      .putTournamentPlayer(
        id,
        tournamentId,
        putTournamentPlayerRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieves a Player
   * @summary Show Tournament Player
   * @param {number} tournamentId ID of the Tournament
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlayersApi
   */
  public showTournamentPlayer(
    tournamentId: number,
    id: number,
    options?: RawAxiosRequestConfig,
  ) {
    return PlayersApiFp(this.configuration)
      .showTournamentPlayer(tournamentId, id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * TournamentsApi - axios parameter creator
 * @export
 */
export const TournamentsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Retrieves a list of all Tournaments
     * @summary List Tournaments
     * @param {number} organizationId ID of the Organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTournaments: async (
      organizationId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'organizationId' is not null or undefined
      assertParamExists("listTournaments", "organizationId", organizationId);
      const localVarPath =
        `/api/v1/organizations/{organization_id}/tournaments`.replace(
          `{${"organization_id"}}`,
          encodeURIComponent(String(organizationId)),
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Creates a new Tournament.
     * @summary Create Tournament
     * @param {number} organizationId ID of the Organization
     * @param {PostTournament} [postTournament]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postTournament: async (
      organizationId: number,
      postTournament?: PostTournament,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'organizationId' is not null or undefined
      assertParamExists("postTournament", "organizationId", organizationId);
      const localVarPath =
        `/api/v1/organizations/{organization_id}/tournaments`.replace(
          `{${"organization_id"}}`,
          encodeURIComponent(String(organizationId)),
        );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postTournament,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TournamentsApi - functional programming interface
 * @export
 */
export const TournamentsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    TournamentsApiAxiosParamCreator(configuration);
  return {
    /**
     * Retrieves a list of all Tournaments
     * @summary List Tournaments
     * @param {number} organizationId ID of the Organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listTournaments(
      organizationId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<Tournament>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listTournaments(
        organizationId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TournamentsApi.listTournaments"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Creates a new Tournament.
     * @summary Create Tournament
     * @param {number} organizationId ID of the Organization
     * @param {PostTournament} [postTournament]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postTournament(
      organizationId: number,
      postTournament?: PostTournament,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<TournamentDetails>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postTournament(
        organizationId,
        postTournament,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TournamentsApi.postTournament"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * TournamentsApi - factory interface
 * @export
 */
export const TournamentsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TournamentsApiFp(configuration);
  return {
    /**
     * Retrieves a list of all Tournaments
     * @summary List Tournaments
     * @param {number} organizationId ID of the Organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTournaments(
      organizationId: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<Tournament>> {
      return localVarFp
        .listTournaments(organizationId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Creates a new Tournament.
     * @summary Create Tournament
     * @param {number} organizationId ID of the Organization
     * @param {PostTournament} [postTournament]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postTournament(
      organizationId: number,
      postTournament?: PostTournament,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<TournamentDetails> {
      return localVarFp
        .postTournament(organizationId, postTournament, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * TournamentsApi - object-oriented interface
 * @export
 * @class TournamentsApi
 * @extends {BaseAPI}
 */
export class TournamentsApi extends BaseAPI {
  /**
   * Retrieves a list of all Tournaments
   * @summary List Tournaments
   * @param {number} organizationId ID of the Organization
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TournamentsApi
   */
  public listTournaments(
    organizationId: number,
    options?: RawAxiosRequestConfig,
  ) {
    return TournamentsApiFp(this.configuration)
      .listTournaments(organizationId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Creates a new Tournament.
   * @summary Create Tournament
   * @param {number} organizationId ID of the Organization
   * @param {PostTournament} [postTournament]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TournamentsApi
   */
  public postTournament(
    organizationId: number,
    postTournament?: PostTournament,
    options?: RawAxiosRequestConfig,
  ) {
    return TournamentsApiFp(this.configuration)
      .postTournament(organizationId, postTournament, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Delete User
     * @param {number} id ID of the User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteUser", "id", id);
      const localVarPath = `/api/v1/users/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieves a specific User by ID.
     * @summary Show User
     * @param {number} id ID of the User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getUser", "id", id);
      const localVarPath = `/api/v1/users/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieves a list of all Users
     * @summary List Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Updates an existing User.
     * @summary Update User
     * @param {number} id ID of the User
     * @param {PatchUser} [patchUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchUser: async (
      id: number,
      patchUser?: PatchUser,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("patchUser", "id", id);
      const localVarPath = `/api/v1/users/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchUser,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Creates a new User.
     * @summary Create User
     * @param {PostUser} [postUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postUser: async (
      postUser?: PostUser,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions?.headers ?? {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postUser,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Delete User
     * @param {number} id ID of the User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUser(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(
        id,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.deleteUser"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retrieves a specific User by ID.
     * @summary Show User
     * @param {number} id ID of the User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUser(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetails>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(
        id,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.getUser"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retrieves a list of all Users
     * @summary List Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listUsers(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.listUsers(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.listUsers"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Updates an existing User.
     * @summary Update User
     * @param {number} id ID of the User
     * @param {PatchUser} [patchUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchUser(
      id: number,
      patchUser?: PatchUser,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetails>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.patchUser(
        id,
        patchUser,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.patchUser"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Creates a new User.
     * @summary Create User
     * @param {PostUser} [postUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postUser(
      postUser?: PostUser,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetails>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postUser(
        postUser,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.postUser"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UsersApiFp(configuration);
  return {
    /**
     *
     * @summary Delete User
     * @param {number} id ID of the User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(
      id: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .deleteUser(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieves a specific User by ID.
     * @summary Show User
     * @param {number} id ID of the User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(
      id: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<UserDetails> {
      return localVarFp
        .getUser(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieves a list of all Users
     * @summary List Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(options?: RawAxiosRequestConfig): AxiosPromise<Array<User>> {
      return localVarFp
        .listUsers(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Updates an existing User.
     * @summary Update User
     * @param {number} id ID of the User
     * @param {PatchUser} [patchUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchUser(
      id: number,
      patchUser?: PatchUser,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<UserDetails> {
      return localVarFp
        .patchUser(id, patchUser, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Creates a new User.
     * @summary Create User
     * @param {PostUser} [postUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postUser(
      postUser?: PostUser,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<UserDetails> {
      return localVarFp
        .postUser(postUser, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
  /**
   *
   * @summary Delete User
   * @param {number} id ID of the User
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public deleteUser(id: number, options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .deleteUser(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieves a specific User by ID.
   * @summary Show User
   * @param {number} id ID of the User
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public getUser(id: number, options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .getUser(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieves a list of all Users
   * @summary List Users
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public listUsers(options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .listUsers(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Updates an existing User.
   * @summary Update User
   * @param {number} id ID of the User
   * @param {PatchUser} [patchUser]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public patchUser(
    id: number,
    patchUser?: PatchUser,
    options?: RawAxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .patchUser(id, patchUser, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Creates a new User.
   * @summary Create User
   * @param {PostUser} [postUser]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public postUser(postUser?: PostUser, options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .postUser(postUser, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
